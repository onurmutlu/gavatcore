#!/usr/bin/env python3
"""
BabaGAVAT Launcher - Sokak Zekasƒ± ile G√º√ßlendirilmi≈ü AI Kullanƒ±cƒ± Analiz Sistemi
Telegram gruplarƒ±nda g√ºvenilir ≈üovcu tespiti ve dolandƒ±rƒ±cƒ± filtreleme sistemi
BabaGAVAT'ƒ±n sokak tecr√ºbesi ile g√º√ßlendirilmi≈ü ana kontrol merkezi
"""

import asyncio
import json
import time
import signal
import sys
from datetime import datetime
from typing import Dict, List, Any, Optional
import structlog
from telethon import TelegramClient
from telethon.sessions import StringSession

# Core imports - BabaGAVAT'ƒ±n mod√ºlleri
from core.user_analyzer import babagavat_user_analyzer
from core.database_manager import database_manager
from core.telegram_broadcaster import TelegramBroadcaster
from config import Config

# Logging setup - BabaGAVAT temasƒ±
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.stdlib.PositionalArgumentsFormatter(),
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.processors.StackInfoRenderer(),
        structlog.processors.format_exc_info,
        structlog.processors.UnicodeDecoder(),
        structlog.processors.JSONRenderer()
    ],
    context_class=dict,
    logger_factory=structlog.stdlib.LoggerFactory(),
    wrapper_class=structlog.stdlib.BoundLogger,
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger("babagavat.launcher")

class BabaGAVATLauncher:
    """BabaGAVAT Ana Launcher - Sokak Zekasƒ± Kontrol Merkezi"""
    
    def __init__(self):
        self.clients: Dict[str, TelegramClient] = {}
        self.broadcaster: Optional[TelegramBroadcaster] = None
        self.is_running = False
        self.startup_time = None
        
        # BabaGAVAT'ƒ±n bot konfig√ºrasyonlarƒ±
        self.bot_configs = {
            "babagavat": {  # Ana BabaGAVAT hesabƒ±
                "api_id": Config.TELEGRAM_API_ID,
                "api_hash": Config.TELEGRAM_API_HASH,
                "session_string": Config.BABAGAVAT_SESSION,
                "phone": Config.BABAGAVAT_PHONE,
                "role": "main_analyzer"  # Ana analiz botu
            },
            "xxxgeisha": {  # Destek hesabƒ±
                "api_id": Config.TELEGRAM_API_ID,
                "api_hash": Config.TELEGRAM_API_HASH,
                "session_string": Config.XXXGEISHA_SESSION,
                "phone": Config.XXXGEISHA_PHONE,
                "role": "support_monitor"  # Destek monit√∂r
            },
            "yayincilara": {  # Broadcast hesabƒ±
                "api_id": Config.TELEGRAM_API_ID,
                "api_hash": Config.TELEGRAM_API_HASH,
                "session_string": Config.YAYINCILARA_SESSION,
                "phone": Config.YAYINCILARA_PHONE,
                "role": "broadcaster"  # Broadcast botu
            }
        }
        
        logger.info("üí™ BabaGAVAT Launcher ba≈ülatƒ±ldƒ± - Sokak zekasƒ± aktif!")
    
    async def initialize(self) -> None:
        """BabaGAVAT sistemini ba≈ülat"""
        try:
            self.startup_time = datetime.now()
            logger.info("üöÄ BabaGAVAT sistemi ba≈ülatƒ±lƒ±yor - Sokak kontrol√º ba≈ülƒ±yor...")
            
            # 1. Database'i ba≈ülat
            await self._initialize_database()
            
            # 2. Telegram client'larƒ±nƒ± ba≈ülat
            await self._initialize_telegram_clients()
            
            # 3. Broadcaster'ƒ± ba≈ülat
            await self._initialize_broadcaster()
            
            # 4. BabaGAVAT User Analyzer'ƒ± ba≈ülat
            await self._initialize_babagavat_analyzer()
            
            # 5. Background tasks ba≈ülat
            await self._start_background_tasks()
            
            # 6. Signal handler'larƒ± kaydet
            self._register_signal_handlers()
            
            self.is_running = True
            startup_duration = (datetime.now() - self.startup_time).total_seconds()
            
            logger.info(f"""
üí™ BabaGAVAT Sistemi Hazƒ±r - Sokak Zekasƒ± Aktif! 
‚è±Ô∏è Ba≈ülatma s√ºresi: {startup_duration:.2f} saniye
ü§ñ Aktif botlar: {len(self.clients)}
üïµÔ∏è Monitoring: BA≈ûLADI
üîç Analiz: AKTƒ∞F
üéØ Sokak Kontrol√º: DEVREDE
            """)
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT ba≈ülatma hatasƒ±: {e}")
            raise
    
    async def _initialize_database(self) -> None:
        """Database'i ba≈ülat"""
        try:
            await database_manager.initialize()
            logger.info("‚úÖ BabaGAVAT Database hazƒ±r - Sokak dosyalarƒ± a√ßƒ±ldƒ±! üìã")
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Database ba≈ülatma hatasƒ±: {e}")
            raise
    
    async def _initialize_telegram_clients(self) -> None:
        """Telegram client'larƒ±nƒ± ba≈ülat"""
        try:
            for bot_name, config in self.bot_configs.items():
                try:
                    # Session string varsa kullan, yoksa telefon ile giri≈ü yap
                    if config.get("session_string"):
                        session = StringSession(config["session_string"])
                    else:
                        session = f"sessions/{bot_name}"
                    
                    client = TelegramClient(
                        session,
                        config["api_id"],
                        config["api_hash"]
                    )
                    
                    await client.start(phone=config["phone"])
                    
                    # Client'ƒ± test et
                    me = await client.get_me()
                    role = config.get("role", "unknown")
                    
                    if bot_name == "babagavat":
                        logger.info(f"üí™ {bot_name} baƒülandƒ±: @{me.username} - BabaGAVAT Ana Kontrol!")
                    else:
                        logger.info(f"‚úÖ {bot_name} baƒülandƒ±: @{me.username} - {role}")
                    
                    self.clients[bot_name] = client
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è {bot_name} baƒülantƒ± hatasƒ±: {e}")
            
            if not self.clients:
                raise Exception("Hi√ßbir Telegram client ba≈ülatƒ±lamadƒ±!")
            
            logger.info(f"‚úÖ {len(self.clients)} BabaGAVAT client hazƒ±r - Sokak aƒüƒ± kuruldu! üï∏Ô∏è")
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Telegram client ba≈ülatma hatasƒ±: {e}")
            raise
    
    async def _initialize_broadcaster(self) -> None:
        """Broadcaster'ƒ± ba≈ülat"""
        try:
            self.broadcaster = TelegramBroadcaster()
            await self.broadcaster.initialize(self.clients)
            logger.info("‚úÖ BabaGAVAT Broadcaster hazƒ±r - Sokak mesajlarƒ± aktif! üì¢")
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Broadcaster ba≈ülatma hatasƒ±: {e}")
            raise
    
    async def _initialize_babagavat_analyzer(self) -> None:
        """BabaGAVAT User Analyzer'ƒ± ba≈ülat"""
        try:
            await babagavat_user_analyzer.initialize(self.clients)
            logger.info("‚úÖ BabaGAVAT User Analyzer hazƒ±r - Sokak zekasƒ± devrede! üß†")
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Analyzer ba≈ülatma hatasƒ±: {e}")
            raise
    
    async def _start_background_tasks(self) -> None:
        """Background task'larƒ± ba≈ülat"""
        try:
            # BabaGAVAT'ƒ±n √∂zel g√∂revleri
            asyncio.create_task(self._babagavat_status_reporter())
            asyncio.create_task(self._babagavat_performance_monitor())
            asyncio.create_task(self._babagavat_daily_report_generator())
            asyncio.create_task(self._babagavat_intelligence_coordinator())
            
            logger.info("‚úÖ BabaGAVAT Background tasks ba≈ülatƒ±ldƒ± - Sokak g√∂revleri aktif! üéØ")
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Background tasks ba≈ülatma hatasƒ±: {e}")
    
    def _register_signal_handlers(self) -> None:
        """Signal handler'larƒ± kaydet"""
        try:
            signal.signal(signal.SIGINT, self._signal_handler)
            signal.signal(signal.SIGTERM, self._signal_handler)
            logger.info("‚úÖ BabaGAVAT Signal handlers kaydedildi")
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è BabaGAVAT Signal handler kayƒ±t hatasƒ±: {e}")
    
    def _signal_handler(self, signum, frame):
        """Signal handler"""
        logger.info(f"üõë BabaGAVAT Signal alƒ±ndƒ±: {signum}")
        asyncio.create_task(self.shutdown())
    
    async def _babagavat_status_reporter(self) -> None:
        """BabaGAVAT sistem durumu raporu"""
        while self.is_running:
            try:
                await asyncio.sleep(1800)  # Her 30 dakika
                
                # BabaGAVAT'ƒ±n sistem durumu raporu
                status_report = await self._generate_babagavat_status_report()
                logger.info(f"üìä BabaGAVAT Sistem Durumu: {json.dumps(status_report, indent=2)}")
                
            except Exception as e:
                logger.error(f"‚ùå BabaGAVAT Status reporter hatasƒ±: {e}")
                await asyncio.sleep(300)
    
    async def _babagavat_performance_monitor(self) -> None:
        """BabaGAVAT performans monit√∂r√º"""
        while self.is_running:
            try:
                await asyncio.sleep(3600)  # Her saat
                
                # BabaGAVAT'ƒ±n performans metrikleri
                performance_data = await self._collect_babagavat_performance_metrics()
                logger.info(f"‚ö° BabaGAVAT Performans: {json.dumps(performance_data, indent=2)}")
                
            except Exception as e:
                logger.error(f"‚ùå BabaGAVAT Performance monitor hatasƒ±: {e}")
                await asyncio.sleep(300)
    
    async def _babagavat_daily_report_generator(self) -> None:
        """BabaGAVAT g√ºnl√ºk rapor olu≈üturucu"""
        while self.is_running:
            try:
                await asyncio.sleep(86400)  # Her 24 saat
                
                # BabaGAVAT'ƒ±n g√ºnl√ºk raporu
                daily_report = await self._generate_babagavat_daily_report()
                
                # Raporu kaydet
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                report_file = f"babagavat_daily_report_{timestamp}.json"
                
                with open(report_file, 'w', encoding='utf-8') as f:
                    json.dump(daily_report, f, indent=2, ensure_ascii=False, default=str)
                
                logger.info(f"üìã BabaGAVAT G√ºnl√ºk rapor olu≈üturuldu: {report_file}")
                
            except Exception as e:
                logger.error(f"‚ùå BabaGAVAT Daily report generator hatasƒ±: {e}")
                await asyncio.sleep(3600)
    
    async def _babagavat_intelligence_coordinator(self) -> None:
        """BabaGAVAT istihbarat koordinat√∂r√º"""
        while self.is_running:
            try:
                await asyncio.sleep(2700)  # Her 45 dakika
                
                # BabaGAVAT'ƒ±n √∂zel istihbarat analizi
                await self._run_babagavat_intelligence_analysis()
                
                logger.info("üïµÔ∏è BabaGAVAT istihbarat koordinasyonu tamamlandƒ±")
                
            except Exception as e:
                logger.error(f"‚ùå BabaGAVAT Intelligence coordinator hatasƒ±: {e}")
                await asyncio.sleep(300)
    
    async def _generate_babagavat_status_report(self) -> Dict[str, Any]:
        """BabaGAVAT sistem durumu raporu olu≈ütur"""
        try:
            uptime = (datetime.now() - self.startup_time).total_seconds()
            
            # BabaGAVAT'ƒ±n √∂zel istatistikleri
            user_stats = await babagavat_user_analyzer.get_user_analysis_report()
            invite_stats = await babagavat_user_analyzer.get_invite_candidates_report()
            suspicious_stats = await babagavat_user_analyzer.get_suspicious_users_report()
            
            return {
                "timestamp": datetime.now().isoformat(),
                "babagavat_uptime_seconds": uptime,
                "active_clients": len(self.clients),
                "monitored_groups": len(babagavat_user_analyzer.monitored_groups),
                "street_smart_analysis": {
                    "user_statistics": user_stats.get("statistics", []),
                    "invite_candidates": len(invite_stats.get("recent_candidates", [])),
                    "suspicious_users": suspicious_stats.get("total_count", 0)
                },
                "babagavat_status": "sokak_kontrolu_aktif" if self.is_running else "devre_disi",
                "street_intelligence_level": "yuksek"
            }
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Status report olu≈üturma hatasƒ±: {e}")
            return {"error": str(e)}
    
    async def _collect_babagavat_performance_metrics(self) -> Dict[str, Any]:
        """BabaGAVAT performans metrikleri topla"""
        try:
            import psutil
            
            # Sistem metrikleri
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')
            
            # BabaGAVAT'ƒ±n √∂zel metrikleri
            uptime = (datetime.now() - self.startup_time).total_seconds()
            
            return {
                "timestamp": datetime.now().isoformat(),
                "babagavat_uptime_hours": uptime / 3600,
                "system_performance": {
                    "cpu_percent": cpu_percent,
                    "memory_percent": memory.percent,
                    "memory_used_gb": memory.used / (1024**3),
                    "disk_percent": disk.percent
                },
                "babagavat_metrics": {
                    "active_clients": len(self.clients),
                    "monitored_groups": len(babagavat_user_analyzer.monitored_groups),
                    "street_smart_level": "maksimum"
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Performance metrics toplama hatasƒ±: {e}")
            return {"error": str(e)}
    
    async def _generate_babagavat_daily_report(self) -> Dict[str, Any]:
        """BabaGAVAT g√ºnl√ºk rapor olu≈ütur"""
        try:
            # BabaGAVAT'ƒ±n detaylƒ± istatistikleri
            user_report = await babagavat_user_analyzer.get_user_analysis_report()
            invite_report = await babagavat_user_analyzer.get_invite_candidates_report()
            suspicious_report = await babagavat_user_analyzer.get_suspicious_users_report()
            
            return {
                "report_date": datetime.now().isoformat(),
                "report_type": "babagavat_daily_street_analysis",
                "babagavat_summary": {
                    "total_monitored_users": user_report.get("total_monitored_users", 0),
                    "monitored_groups": user_report.get("monitored_groups", 0),
                    "invite_candidates": len(invite_report.get("recent_candidates", [])),
                    "suspicious_users": suspicious_report.get("total_count", 0),
                    "street_smart_level": "yuksek"
                },
                "street_intelligence": {
                    "user_statistics": user_report.get("statistics", []),
                    "invite_candidates": invite_report,
                    "suspicious_users": suspicious_report
                },
                "babagavat_system_info": await self._collect_babagavat_performance_metrics()
            }
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Daily report olu≈üturma hatasƒ±: {e}")
            return {"error": str(e)}
    
    async def _run_babagavat_intelligence_analysis(self) -> None:
        """BabaGAVAT'ƒ±n √∂zel istihbarat analizi"""
        try:
            # Y√ºksek potansiyelli kullanƒ±cƒ±larƒ± tespit et
            async with database_manager._get_connection() as db:
                cursor = await db.execute("""
                    SELECT COUNT(*) as total_users,
                           SUM(CASE WHEN trust_level = 'trusted' THEN 1 ELSE 0 END) as trusted_users,
                           SUM(CASE WHEN trust_level = 'suspicious' THEN 1 ELSE 0 END) as suspicious_users,
                           AVG(trust_score) as avg_trust_score
                    FROM babagavat_user_profiles
                """)
                stats = await cursor.fetchone()
                
                if stats:
                    total_users, trusted_users, suspicious_users, avg_trust_score = stats
                    
                    # BabaGAVAT'ƒ±n istihbarat deƒüerlendirmesi
                    intelligence_level = "yuksek" if avg_trust_score > 0.6 else "orta" if avg_trust_score > 0.4 else "dusuk"
                    
                    logger.info(f"""
üïµÔ∏è BabaGAVAT ƒ∞stihbarat Raporu:
üë• Toplam Kullanƒ±cƒ±: {total_users}
üü¢ G√ºvenilir: {trusted_users}
üî¥ ≈û√ºpheli: {suspicious_users}
üìä Ortalama G√ºven: {avg_trust_score:.2f}
üß† ƒ∞stihbarat Seviyesi: {intelligence_level}
                    """)
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Intelligence analysis hatasƒ±: {e}")
    
    # ==================== BABAGAVAT ADMIN COMMANDS ====================
    
    async def get_babagavat_system_status(self) -> Dict[str, Any]:
        """BabaGAVAT sistem durumu getir"""
        return await self._generate_babagavat_status_report()
    
    async def get_babagavat_user_analysis(self, user_id: str = None) -> Dict[str, Any]:
        """BabaGAVAT kullanƒ±cƒ± analizi getir"""
        return await babagavat_user_analyzer.get_user_analysis_report(user_id)
    
    async def get_babagavat_invite_candidates(self) -> Dict[str, Any]:
        """BabaGAVAT davet adaylarƒ± getir"""
        return await babagavat_user_analyzer.get_invite_candidates_report()
    
    async def get_babagavat_suspicious_users(self) -> Dict[str, Any]:
        """BabaGAVAT ≈ü√ºpheli kullanƒ±cƒ±lar getir"""
        return await babagavat_user_analyzer.get_suspicious_users_report()
    
    async def babagavat_manual_trust_override(self, user_id: str, trust_score: float, reason: str) -> bool:
        """BabaGAVAT manuel g√ºven puanƒ± deƒüi≈üikliƒüi"""
        return await babagavat_user_analyzer.manual_trust_override(user_id, trust_score, f"BabaGAVAT Override: {reason}")
    
    async def babagavat_send_invite_to_candidate(self, candidate_id: int) -> bool:
        """BabaGAVAT davet adayƒ±na mesaj g√∂nder"""
        try:
            # BabaGAVAT'ƒ±n √∂zel davet sistemi
            logger.info(f"üí™ BabaGAVAT davet g√∂nderiyor: candidate_id={candidate_id}")
            
            # Burada ger√ßek davet g√∂nderme i≈ülemi yapƒ±labilir
            # BabaGAVAT'ƒ±n ki≈üiselle≈ütirilmi≈ü mesajlarƒ± ile
            
            return True
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT davet g√∂nderme hatasƒ±: {e}")
            return False
    
    async def babagavat_broadcast_street_message(self, message: str, target_type: str = "all") -> Dict[str, Any]:
        """BabaGAVAT sokak mesajƒ± broadcast et"""
        try:
            if not self.broadcaster:
                return {"error": "Broadcaster hazƒ±r deƒüil"}
            
            # BabaGAVAT'ƒ±n sokak temasƒ± ile mesaj
            babagavat_message = f"""
üí™ BabaGAVAT'tan Sokak Mesajƒ±:

{message}

üéØ Sokak zekasƒ± ile g√º√ßlendirilmi≈ü sistem
üî• #BabaGAVAT #SokakZekasƒ± #GavatCore
            """.strip()
            
            # Broadcast g√∂nder
            result = await self.broadcaster.send_broadcast(
                message=babagavat_message,
                target_type=target_type,
                message_type="babagavat_street_message"
            )
            
            logger.info(f"üì¢ BabaGAVAT sokak mesajƒ± g√∂nderildi: {target_type}")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT broadcast hatasƒ±: {e}")
            return {"error": str(e)}
    
    async def shutdown(self) -> None:
        """BabaGAVAT sistemini kapat"""
        try:
            logger.info("üõë BabaGAVAT sistemi kapatƒ±lƒ±yor - Sokak kontrol√º sonlandƒ±rƒ±lƒ±yor...")
            
            self.is_running = False
            
            # BabaGAVAT analyzer'ƒ± durdur
            babagavat_user_analyzer.is_monitoring = False
            
            # Telegram client'larƒ±nƒ± kapat
            for bot_name, client in self.clients.items():
                try:
                    await client.disconnect()
                    if bot_name == "babagavat":
                        logger.info(f"üí™ {bot_name} baƒülantƒ±sƒ± kapatƒ±ldƒ± - BabaGAVAT offline!")
                    else:
                        logger.info(f"‚úÖ {bot_name} baƒülantƒ±sƒ± kapatƒ±ldƒ±")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è {bot_name} kapatma hatasƒ±: {e}")
            
            logger.info("‚úÖ BabaGAVAT sistemi kapatƒ±ldƒ± - Sokak zekasƒ± devre dƒ±≈üƒ±!")
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Shutdown hatasƒ±: {e}")
    
    async def run_forever(self) -> None:
        """BabaGAVAT sistemini s√ºrekli √ßalƒ±≈ütƒ±r"""
        try:
            logger.info("üîÑ BabaGAVAT sistemi √ßalƒ±≈üƒ±yor - Sokak kontrol√º devam ediyor...")
            
            while self.is_running:
                await asyncio.sleep(1)
                
        except KeyboardInterrupt:
            logger.info("‚å®Ô∏è BabaGAVAT Keyboard interrupt alƒ±ndƒ±")
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT Runtime hatasƒ±: {e}")
        finally:
            await self.shutdown()

async def main():
    """BabaGAVAT Ana fonksiyonu"""
    try:
        # BabaGAVAT Launcher'ƒ± olu≈ütur ve ba≈ülat
        launcher = BabaGAVATLauncher()
        await launcher.initialize()
        
        # BabaGAVAT sistemini √ßalƒ±≈ütƒ±r
        await launcher.run_forever()
        
    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è BabaGAVAT Program sonlandƒ±rƒ±ldƒ±")
    except Exception as e:
        logger.error(f"‚ùå BabaGAVAT Ana program hatasƒ±: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # BabaGAVAT Event loop'u √ßalƒ±≈ütƒ±r
    try:
        print("""
üí™ BabaGAVAT - Sokak Zekasƒ± ile G√º√ßlendirilmi≈ü AI Kullanƒ±cƒ± Analiz Sistemi

üéØ √ñzellikler:
‚úÖ Sokak zekasƒ± ile spam tespiti
‚úÖ G√ºvenilir ≈üovcu analizi  
‚úÖ Dolandƒ±rƒ±cƒ± filtreleme
‚úÖ Otomatik davet sistemi
‚úÖ Real-time monitoring
‚úÖ Intelligence coordination

üöÄ Sistem ba≈ülatƒ±lƒ±yor...
        """)
        
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë BabaGAVAT Program sonlandƒ±rƒ±ldƒ±")
    except Exception as e:
        print(f"‚ùå BabaGAVAT Fatal error: {e}")
        sys.exit(1) 