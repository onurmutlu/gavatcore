#!/usr/bin/env python3
"""
üöÄ GavatCore V2 - Next Generation AI Social Gaming Platform
AI Voice, Real-time Interaction, Quest System, Social Gaming

Bu launcher t√ºm yeni sistemleri entegre eder:
- MCP API System (Mod√ºler karakter ve g√∂rev y√∂netimi)
- AI Voice Engine (GPT-4o + Whisper)
- Social Gaming Engine (Topluluk etkinlikleri)
- Real-time Voice Chat
- Quest & XP System
- Leaderboards & Badges
"""

import asyncio
import os
import sys
import signal
import time
import json
from datetime import datetime
from typing import Dict, Any, Optional, List
import logging
import structlog

# Core V2 imports
from core.mcp_api_system import mcp_api
from core.ai_voice_engine import initialize_voice_engine, voice_engine
from core.social_gaming_engine import social_gaming
from core.telegram_broadcaster import telegram_broadcaster

# Legacy imports (mevcut sistem ile uyumluluk)
from handlers.dm_handler import setup_dm_handlers
from handlers.group_handler import setup_group_handlers
from core.session_manager import get_active_sessions
from core.integrated_optimizer import start_integrated_optimization, BAMGUM_CONFIG

logger = structlog.get_logger("gavatcore.v2_launcher")

class GavatCoreV2:
    """GavatCore V2 - Next Generation Platform"""
    
    def __init__(self):
        self.is_running = False
        self.startup_time = None
        self.clients = {}
        
        # V2 Systems
        self.mcp_api = mcp_api
        self.voice_engine = None
        self.social_gaming = social_gaming
        
        # Performance metrics
        self.v2_metrics = {
            "startup_time": 0,
            "voice_sessions": 0,
            "social_events": 0,
            "quests_completed": 0,
            "xp_distributed": 0,
            "tokens_distributed": 0,
            "active_users": 0,
            "character_interactions": 0
        }
        
        logger.info("üöÄ GavatCore V2 ba≈ülatƒ±lƒ±yor...")
    
    async def initialize(self) -> bool:
        """T√ºm sistemleri ba≈ülat"""
        startup_start = time.time()
        
        try:
            logger.info("üéÆ GavatCore V2 - Next Generation Platform")
            logger.info("=" * 60)
            
            # 1. MCP API System ba≈ülat
            logger.info("üîß MCP API Sistemi ba≈ülatƒ±lƒ±yor...")
            await self.mcp_api.initialize()
            
            # 2. AI Voice Engine ba≈ülat
            logger.info("üé§ AI Voice Engine ba≈ülatƒ±lƒ±yor...")
            openai_api_key = os.getenv("OPENAI_API_KEY")
            if not openai_api_key:
                logger.warning("‚ö†Ô∏è OPENAI_API_KEY bulunamadƒ±, voice √∂zellikler devre dƒ±≈üƒ±")
                self.voice_engine = None
            else:
                self.voice_engine = await initialize_voice_engine(openai_api_key)
            
            # 3. Social Gaming Engine ba≈ülat
            logger.info("üéØ Social Gaming Engine ba≈ülatƒ±lƒ±yor...")
            await self.social_gaming.initialize()
            
            # 4. Legacy bot sistemini ba≈ülat (mevcut kullanƒ±cƒ±lar i√ßin)
            logger.info("ü§ñ Legacy bot sistemi ba≈ülatƒ±lƒ±yor...")
            await self._initialize_legacy_bots()
            
            # 5. Telegram Broadcaster ba≈ülat
            logger.info("üì¢ Telegram Broadcaster ba≈ülatƒ±lƒ±yor...")
            await self._initialize_telegram_broadcaster()
            
            # 6. Event handlers kurulumu
            logger.info("‚öôÔ∏è Event handlers kurulumu...")
            await self._setup_event_handlers()
            
            # 7. Background tasks ba≈ülat
            logger.info("üîÑ Background tasks ba≈ülatƒ±lƒ±yor...")
            await self._start_background_tasks()
            
            # 8. Shutdown handlers
            self._register_shutdown_handlers()
            
            # Startup metrics
            self.startup_time = time.time() - startup_start
            self.v2_metrics["startup_time"] = self.startup_time
            self.is_running = True
            
            logger.info("=" * 60)
            logger.info("‚úÖ GavatCore V2 ba≈üarƒ±yla ba≈ülatƒ±ldƒ±!")
            logger.info(f"‚è±Ô∏è Ba≈ülatma s√ºresi: {self.startup_time:.2f} saniye")
            logger.info(f"üé§ Voice Engine: {'‚úÖ Aktif' if self.voice_engine else '‚ùå Devre dƒ±≈üƒ±'}")
            logger.info(f"üéÆ Social Gaming: ‚úÖ Aktif")
            logger.info(f"üéØ Quest System: ‚úÖ Aktif")
            logger.info(f"ü§ñ Bot Count: {len(self.clients)}")
            logger.info("=" * 60)
            
            # Ba≈ülangƒ±√ß bildirimi
            await self._send_startup_notification()
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå GavatCore V2 ba≈ülatma hatasƒ±: {e}")
            await self.shutdown()
            return False
    
    async def run(self) -> None:
        """Ana √ßalƒ±≈üma d√∂ng√ºs√º"""
        try:
            logger.info("üöÄ GavatCore V2 √ßalƒ±≈üƒ±yor...")
            
            # Ana monitoring d√∂ng√ºs√º
            while self.is_running:
                await self._update_metrics()
                await self._health_check()
                await asyncio.sleep(30)  # 30 saniyede bir kontrol
                
        except KeyboardInterrupt:
            logger.info("üõë Kullanƒ±cƒ± tarafƒ±ndan durduruldu")
        except Exception as e:
            logger.error(f"‚ùå Ana d√∂ng√º hatasƒ±: {e}")
        finally:
            await self.shutdown()
    
    # ==================== VOICE FEATURES ====================
    
    async def start_voice_session(self, user_id: str, character_id: str) -> Optional[str]:
        """Sesli sohbet oturumu ba≈ülat"""
        if not self.voice_engine:
            logger.warning("Voice engine aktif deƒüil")
            return None
        
        try:
            session_id = await self.voice_engine.start_voice_session(user_id, character_id)
            self.v2_metrics["voice_sessions"] += 1
            
            logger.info(f"üé§ Sesli oturum ba≈ülatƒ±ldƒ±: {session_id}")
            return session_id
            
        except Exception as e:
            logger.error(f"‚ùå Sesli oturum ba≈ülatma hatasƒ±: {e}")
            return None
    
    async def process_voice_message(self, audio_data: bytes, session_id: str) -> Dict[str, Any]:
        """Sesli mesaj i≈üle"""
        if not self.voice_engine:
            return {"success": False, "error": "Voice engine aktif deƒüil"}
        
        try:
            result = await self.voice_engine.process_voice_interaction(audio_data, session_id)
            if result.get("success"):
                self.v2_metrics["character_interactions"] += 1
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Sesli mesaj i≈üleme hatasƒ±: {e}")
            return {"success": False, "error": str(e)}
    
    # ==================== SOCIAL FEATURES ====================
    
    async def create_social_event(self, title: str, description: str, character_id: str, event_type: str = "voice_party") -> str:
        """Sosyal etkinlik olu≈ütur"""
        try:
            from core.social_gaming_engine import SocialEvent, EventType
            
            event = SocialEvent(
                event_id=f"event_{int(time.time())}",
                title=title,
                description=description,
                event_type=EventType(event_type),
                host_character_id=character_id,
                max_participants=20,
                rewards=[
                    {"type": "xp", "amount": 100},
                    {"type": "token", "amount": 50}
                ]
            )
            
            await self.social_gaming.create_social_event(event)
            self.v2_metrics["social_events"] += 1
            
            logger.info(f"üéâ Sosyal etkinlik olu≈üturuldu: {title}")
            return event.event_id
            
        except Exception as e:
            logger.error(f"‚ùå Sosyal etkinlik olu≈üturma hatasƒ±: {e}")
            raise
    
    async def join_social_event(self, event_id: str, user_id: str) -> Dict[str, Any]:
        """Sosyal etkinliƒüe katƒ±l"""
        try:
            result = await self.social_gaming.join_event(event_id, user_id)
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Sosyal etkinliƒüe katƒ±lma hatasƒ±: {e}")
            return {"success": False, "error": str(e)}
    
    # ==================== QUEST FEATURES ====================
    
    async def assign_daily_quests(self, user_id: str) -> List[str]:
        """G√ºnl√ºk g√∂revleri ata"""
        try:
            assigned_quests = []
            
            # G√ºnl√ºk sohbet g√∂revi
            if await self.mcp_api.assign_quest_to_user("daily_chat", user_id):
                assigned_quests.append("daily_chat")
            
            # Sesli etkile≈üim g√∂revi (voice engine aktifse)
            if self.voice_engine and await self.mcp_api.assign_quest_to_user("voice_interaction", user_id):
                assigned_quests.append("voice_interaction")
            
            logger.info(f"üìã G√ºnl√ºk g√∂revler atandƒ±: {user_id} -> {assigned_quests}")
            return assigned_quests
            
        except Exception as e:
            logger.error(f"‚ùå G√ºnl√ºk g√∂rev atama hatasƒ±: {e}")
            return []
    
    async def complete_quest(self, quest_id: str, user_id: str) -> Dict[str, Any]:
        """G√∂revi tamamla"""
        try:
            result = await self.mcp_api.complete_quest(quest_id, user_id)
            if result.get("success"):
                self.v2_metrics["quests_completed"] += 1
                self.v2_metrics["xp_distributed"] += result.get("total_xp", 0)
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå G√∂rev tamamlama hatasƒ±: {e}")
            return {"success": False, "error": str(e)}
    
    # ==================== USER MANAGEMENT ====================
    
    async def get_user_dashboard(self, user_id: str) -> Dict[str, Any]:
        """Kullanƒ±cƒ± dashboard bilgilerini al"""
        try:
            # User progress
            user_progress = await self.mcp_api.get_user_progress(user_id)
            if not user_progress:
                # Yeni kullanƒ±cƒ± olu≈ütur
                await self.mcp_api.add_xp(user_id, 0)  # Bu otomatik user olu≈üturur
                user_progress = await self.mcp_api.get_user_progress(user_id)
            
            # Active quests
            active_quests = await self.mcp_api.get_active_quests_for_user(user_id)
            
            # Leaderboard position
            leaderboard = await self.mcp_api.get_leaderboard(100)
            user_rank = None
            for i, entry in enumerate(leaderboard):
                if entry["user_id"] == user_id:
                    user_rank = i + 1
                    break
            
            # Voice stats (eƒüer voice engine aktifse)
            voice_stats = {}
            if self.voice_engine:
                voice_stats = await self.voice_engine.get_user_voice_stats(user_id)
            
            dashboard = {
                "user_progress": {
                    "level": user_progress.level,
                    "total_xp": user_progress.total_xp,
                    "tokens": user_progress.tokens,
                    "badges": user_progress.badges,
                    "completed_quests_count": len(user_progress.completed_quests)
                },
                "active_quests": [
                    {
                        "id": quest.id,
                        "title": quest.title,
                        "description": quest.description,
                        "quest_type": quest.quest_type.value
                    } for quest in active_quests
                ],
                "leaderboard_rank": user_rank,
                "voice_stats": voice_stats,
                "character_relationships": user_progress.character_relationships
            }
            
            return dashboard
            
        except Exception as e:
            logger.error(f"‚ùå User dashboard hatasƒ±: {e}")
            return {}
    
    # ==================== PRIVATE METHODS ====================
    
    async def _initialize_legacy_bots(self) -> None:
        """Legacy bot sistemini ba≈ülat"""
        try:
            # Mevcut session'larƒ± al
            sessions = await get_active_sessions()
            
            if not sessions:
                logger.warning("‚ö†Ô∏è Aktif session bulunamadƒ±")
                return
            
            # Bot client'larƒ±nƒ± ba≈ülat (basitle≈ütirilmi≈ü)
            from telethon import TelegramClient
            
            for username, session_data in sessions.items():
                try:
                    client = TelegramClient(
                        session_data["session_file"],
                        session_data["api_id"],
                        session_data["api_hash"]
                    )
                    
                    await client.connect()
                    
                    if await client.is_user_authorized():
                        self.clients[username] = {
                            "client": client,
                            "session_data": session_data
                        }
                        
                        # V2 handlers setup
                        await self._setup_v2_handlers(client, username)
                        
                        logger.info(f"‚úÖ Legacy bot ba≈ülatƒ±ldƒ±: {username}")
                    else:
                        await client.disconnect()
                        
                except Exception as e:
                    logger.error(f"‚ùå Legacy bot ba≈ülatma hatasƒ± ({username}): {e}")
            
        except Exception as e:
            logger.error(f"‚ùå Legacy bot sistemi ba≈ülatma hatasƒ±: {e}")
    
    async def _initialize_telegram_broadcaster(self) -> None:
        """Telegram Broadcaster'ƒ± ba≈ülat"""
        try:
            # Client'larƒ± broadcaster'a ver
            client_dict = {}
            for username, bot_data in self.clients.items():
                client_dict[username] = bot_data["client"]
            
            # Hedef gruplarƒ± belirle (config'den alƒ±nacak)
            target_groups = []
            # √ñrnek: Aktif gruplarƒ± otomatik tespit et
            for username, bot_data in self.clients.items():
                try:
                    client = bot_data["client"]
                    # Bu kƒ±sƒ±m ger√ßek grup ID'leri ile g√ºncellenecek
                    # Test i√ßin manuel grup ekleme (ger√ßek grup ID'si gerekli)
                    # ≈ûimdilik bo≈ü liste ile test ediyoruz
                    # Log'lardan aktif grup ID'lerini kullanabiliriz
                    # test_group_ids = [
                    #     -1002607016335,  # Log'lardan g√∂r√ºlen aktif grup
                    #     # -1001686321334,  # Ba≈üka bir aktif grup
                    # ]
                    # target_groups.extend(test_group_ids)
                    
                    pass
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Grup tespiti hatasƒ± ({username}): {e}")
            
            # ≈ûimdilik broadcast'i devre dƒ±≈üƒ± bƒ±rakƒ±yoruz (grup eri≈üim sorunu)
            logger.info(f"üì¢ Hedef grup sayƒ±sƒ±: {len(target_groups)} (broadcast devre dƒ±≈üƒ±)")
            
            # Broadcaster'ƒ± ba≈ülat
            await telegram_broadcaster.initialize(client_dict, target_groups)
            
            logger.info("‚úÖ Telegram Broadcaster hazƒ±r")
            
        except Exception as e:
            logger.error(f"‚ùå Telegram Broadcaster ba≈ülatma hatasƒ±: {e}")
    
    async def _setup_v2_handlers(self, client, username: str) -> None:
        """V2 event handlers kurulumu"""
        try:
            # Legacy handlers
            await setup_dm_handlers(client, username)
            await setup_group_handlers(client, username)
            
            # V2 specific handlers burada eklenecek
            # √ñrnek: voice command handlers, quest handlers, etc.
            
        except Exception as e:
            logger.error(f"‚ùå V2 handlers kurulum hatasƒ± ({username}): {e}")
    
    async def _setup_event_handlers(self) -> None:
        """Event handlers kurulumu"""
        try:
            # MCP API events
            self.mcp_api.on("quest_completed", self._on_quest_completed)
            self.mcp_api.on("level_up", self._on_level_up)
            self.mcp_api.on("badge_earned", self._on_badge_earned)
            
            # Voice engine events (eƒüer aktifse)
            if self.voice_engine:
                self.voice_engine.on("voice_session_started", self._on_voice_session_started)
                self.voice_engine.on("voice_interaction_processed", self._on_voice_interaction)
            
            # Social gaming events
            self.social_gaming.on("event_created", self._on_social_event_created)
            
            logger.info("‚úÖ Event handlers kuruldu")
            
        except Exception as e:
            logger.error(f"‚ùå Event handlers kurulum hatasƒ±: {e}")
    
    async def _start_background_tasks(self) -> None:
        """Background tasks ba≈ülat"""
        try:
            # Metrics g√ºncelleme
            asyncio.create_task(self._metrics_update_loop())
            
            # Daily quest assignment
            asyncio.create_task(self._daily_quest_loop())
            
            # System health monitoring
            asyncio.create_task(self._health_monitoring_loop())
            
            logger.info("‚úÖ Background tasks ba≈ülatƒ±ldƒ±")
            
        except Exception as e:
            logger.error(f"‚ùå Background tasks ba≈ülatma hatasƒ±: {e}")
    
    async def _metrics_update_loop(self) -> None:
        """Metrics g√ºncelleme d√∂ng√ºs√º"""
        while self.is_running:
            try:
                await self._update_metrics()
                await asyncio.sleep(60)  # 1 dakikada bir
            except Exception as e:
                logger.error(f"‚ùå Metrics g√ºncelleme hatasƒ±: {e}")
                await asyncio.sleep(60)
    
    async def _daily_quest_loop(self) -> None:
        """G√ºnl√ºk g√∂rev atama d√∂ng√ºs√º"""
        while self.is_running:
            try:
                # Her g√ºn saat 00:00'da √ßalƒ±≈üacak ≈üekilde ayarlanacak
                # ≈ûimdilik basit implementation
                await asyncio.sleep(3600)  # 1 saatte bir kontrol
            except Exception as e:
                logger.error(f"‚ùå Daily quest loop hatasƒ±: {e}")
                await asyncio.sleep(3600)
    
    async def _health_monitoring_loop(self) -> None:
        """Sistem saƒülƒ±k izleme d√∂ng√ºs√º"""
        while self.is_running:
            try:
                await self._health_check()
                await asyncio.sleep(300)  # 5 dakikada bir
            except Exception as e:
                logger.error(f"‚ùå Health monitoring hatasƒ±: {e}")
                await asyncio.sleep(300)
    
    async def _update_metrics(self) -> None:
        """Metrics g√ºncelle"""
        try:
            # MCP API stats
            mcp_stats = self.mcp_api.system_stats
            self.v2_metrics.update({
                "active_users": mcp_stats.get("total_users", 0),
                "quests_completed": mcp_stats.get("completed_quests", 0),
                "xp_distributed": mcp_stats.get("total_xp_distributed", 0),
                "tokens_distributed": mcp_stats.get("total_tokens_distributed", 0)
            })
            
            # Voice engine stats
            if self.voice_engine:
                self.v2_metrics["voice_sessions"] = len(self.voice_engine.active_sessions)
            
        except Exception as e:
            logger.error(f"‚ùå Metrics g√ºncelleme hatasƒ±: {e}")
    
    async def _health_check(self) -> None:
        """Sistem saƒülƒ±k kontrol√º"""
        try:
            health_status = {
                "timestamp": datetime.now().isoformat(),
                "uptime_seconds": time.time() - (self.startup_time or time.time()),
                "mcp_api_healthy": bool(self.mcp_api),
                "voice_engine_healthy": bool(self.voice_engine),
                "social_gaming_healthy": bool(self.social_gaming),
                "active_bots": len(self.clients),
                "metrics": self.v2_metrics
            }
            
            # Log health status
            if health_status["uptime_seconds"] % 3600 < 60:  # Her saatte bir log
                logger.info(f"üíö Sistem saƒülƒ±k durumu: {health_status}")
            
        except Exception as e:
            logger.error(f"‚ùå Health check hatasƒ±: {e}")
    
    # ==================== EVENT HANDLERS ====================
    
    async def _on_quest_completed(self, data: Dict[str, Any]) -> None:
        """Quest tamamlandƒ±ƒüƒ±nda"""
        logger.info(f"üéØ Quest tamamlandƒ±: {data}")
        # Telegram broadcast
        await telegram_broadcaster.broadcast_quest_completed(data)
    
    async def _on_level_up(self, data: Dict[str, Any]) -> None:
        """Level atlandƒ±ƒüƒ±nda"""
        logger.info(f"‚¨ÜÔ∏è Level up: {data}")
        # Telegram broadcast
        await telegram_broadcaster.broadcast_level_up(data)
    
    async def _on_badge_earned(self, data: Dict[str, Any]) -> None:
        """Badge kazanƒ±ldƒ±ƒüƒ±nda"""
        logger.info(f"üèÜ Badge kazanƒ±ldƒ±: {data}")
        # Telegram broadcast
        await telegram_broadcaster.broadcast_badge_earned(data)
    
    async def _on_voice_session_started(self, data: Dict[str, Any]) -> None:
        """Voice session ba≈üladƒ±ƒüƒ±nda"""
        logger.info(f"üé§ Voice session ba≈üladƒ±: {data}")
        # Telegram broadcast
        await telegram_broadcaster.broadcast_voice_session(data)
    
    async def _on_voice_interaction(self, data: Dict[str, Any]) -> None:
        """Voice interaction i≈ülendiƒüinde"""
        logger.info(f"üó£Ô∏è Voice interaction: {data}")
    
    async def _on_social_event_created(self, data: Dict[str, Any]) -> None:
        """Sosyal etkinlik olu≈üturulduƒüunda"""
        logger.info(f"üéâ Sosyal etkinlik olu≈üturuldu: {data}")
        # Telegram broadcast
        await telegram_broadcaster.broadcast_social_event(data)
    
    async def _send_startup_notification(self) -> None:
        """Ba≈ülangƒ±√ß bildirimi g√∂nder"""
        try:
            # Telegram gruplarƒ±na bildirim g√∂nderilecek
            startup_message = f"""
üöÄ **GavatCore V2 Ba≈ülatƒ±ldƒ±!**

‚úÖ Yeni √∂zellikler aktif:
üé§ AI Voice Chat (GPT-4o + Whisper)
üéÆ Social Gaming & Events
üéØ Quest & XP System
üèÜ Leaderboards & Badges
üí¨ Real-time Community

‚è±Ô∏è Ba≈ülatma s√ºresi: {self.startup_time:.2f}s
ü§ñ Aktif bot sayƒ±sƒ±: {len(self.clients)}

Yeni deneyimi ke≈üfetmeye hazƒ±r mƒ±sƒ±nƒ±z? üî•
            """
            
            logger.info("üì¢ Startup notification hazƒ±rlandƒ±")
            
        except Exception as e:
            logger.error(f"‚ùå Startup notification hatasƒ±: {e}")
    
    def _register_shutdown_handlers(self) -> None:
        """Shutdown handlers kaydet"""
        def signal_handler(signum, frame):
            logger.info(f"üõë Signal alƒ±ndƒ±: {signum}")
            asyncio.create_task(self.shutdown())
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    
    async def shutdown(self) -> None:
        """Sistemi kapat"""
        try:
            logger.info("üõë GavatCore V2 kapatƒ±lƒ±yor...")
            
            self.is_running = False
            
            # Voice sessions kapat
            if self.voice_engine:
                for session_id in list(self.voice_engine.active_sessions.keys()):
                    await self.voice_engine.end_voice_session(session_id)
            
            # Bot clients kapat
            for username, bot_data in self.clients.items():
                try:
                    await bot_data["client"].disconnect()
                    logger.info(f"‚úÖ Bot kapatƒ±ldƒ±: {username}")
                except Exception as e:
                    logger.error(f"‚ùå Bot kapatma hatasƒ± ({username}): {e}")
            
            # Final metrics
            await self._update_metrics()
            
            logger.info("‚úÖ GavatCore V2 ba≈üarƒ±yla kapatƒ±ldƒ±")
            
        except Exception as e:
            logger.error(f"‚ùå Shutdown hatasƒ±: {e}")

async def main():
    """Ana fonksiyon"""
    try:
        # GavatCore V2 ba≈ülat
        gavatcore_v2 = GavatCoreV2()
        
        if await gavatcore_v2.initialize():
            await gavatcore_v2.run()
        else:
            logger.error("‚ùå GavatCore V2 ba≈ülatƒ±lamadƒ±")
            sys.exit(1)
            
    except KeyboardInterrupt:
        logger.info("üõë Kullanƒ±cƒ± tarafƒ±ndan durduruldu")
    except Exception as e:
        logger.error(f"‚ùå Ana fonksiyon hatasƒ±: {e}")
        sys.exit(1)

if __name__ == "__main__":
    # Logging setup
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # ASCII Art Banner
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë                                                               ‚ïë
    ‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ïë
    ‚ïë  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ïë
    ‚ïë  ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïë
    ‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïë
    ‚ïë  ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ïë
    ‚ïë   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïë
    ‚ïë                                                               ‚ïë
    ‚ïë                        VERSION 2.0                           ‚ïë
    ‚ïë              Next Generation AI Social Gaming                 ‚ïë
    ‚ïë                                                               ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    
    üöÄ AI Voice Chat | üéÆ Social Gaming | üéØ Quest System | üèÜ Leaderboards
    """)
    
    # Ana d√∂ng√ºy√º ba≈ülat
    asyncio.run(main()) 