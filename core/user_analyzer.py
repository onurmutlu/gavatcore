#!/usr/bin/env python3
"""
BabaGAVAT - AI Tabanlƒ± Kullanƒ±cƒ± Analiz ve Sokak Zekasƒ± Sistemi
Telegram gruplarƒ±nda g√ºvenilir ≈üovcu tespiti ve dolandƒ±rƒ±cƒ± filtreleme sistemi
BabaGAVAT'ƒ±n sokak zekasƒ± ile g√º√ßlendirilmi≈ü analiz motoru
"""

import asyncio
import json
import time
import re
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Set, Tuple
from dataclasses import dataclass, asdict
from enum import Enum
import structlog
from telethon import TelegramClient, events
from telethon.tl.types import User, Chat, Channel
from .database_manager import database_manager

logger = structlog.get_logger("babagavat.user_analyzer")

class UserTrustLevel(Enum):
    """Kullanƒ±cƒ± g√ºven seviyeleri - BabaGAVAT'ƒ±n sokak zekasƒ± sƒ±nƒ±flandƒ±rmasƒ±"""
    SUSPICIOUS = "suspicious"  # üî¥ ≈û√ºpheli - Sokakta g√ºvenilmez tip
    NEUTRAL = "neutral"       # üü° N√∂tr - Hen√ºz belli deƒüil
    TRUSTED = "trusted"       # üü¢ G√ºvenilir - BabaGAVAT'ƒ±n onayladƒ±ƒüƒ±

class AnalysisReason(Enum):
    """Analiz nedenleri - BabaGAVAT'ƒ±n sokak tecr√ºbesi"""
    SPAM_DETECTED = "spam_detected"
    TRANSACTION_SIGNALS = "transaction_signals"
    INCONSISTENT_PROFILE = "inconsistent_profile"
    LOW_ENGAGEMENT = "low_engagement"
    POSITIVE_INTERACTION = "positive_interaction"
    CONSISTENT_ACTIVITY = "consistent_activity"
    VERIFIED_PERFORMER = "verified_performer"
    STREET_SMART_APPROVED = "street_smart_approved"  # BabaGAVAT'ƒ±n √∂zel onayƒ±

@dataclass
class UserProfile:
    """Kullanƒ±cƒ± profil analizi - BabaGAVAT'ƒ±n dosyasƒ±"""
    user_id: str
    username: str
    display_name: str
    has_photo: bool
    bio: str
    first_seen: datetime
    last_activity: datetime
    message_count: int = 0
    group_count: int = 0
    trust_score: float = 0.5
    trust_level: UserTrustLevel = UserTrustLevel.NEUTRAL
    analysis_reasons: List[AnalysisReason] = None
    spam_indicators: List[str] = None
    positive_signals: List[str] = None
    transaction_signals: List[str] = None
    interaction_quality: float = 0.5
    consistency_score: float = 0.5
    activity_pattern: Dict[str, Any] = None
    babagavat_notes: str = ""  # BabaGAVAT'ƒ±n √∂zel notlarƒ±

@dataclass
class InviteCandidate:
    """Davet adayƒ± - BabaGAVAT'ƒ±n se√ßtikleri"""
    user_id: str
    username: str
    trust_score: float
    recommendation_reason: str
    contact_message: str
    created_at: datetime
    priority: str = "medium"  # high, medium, low
    babagavat_approval: bool = False  # BabaGAVAT'ƒ±n onayƒ±

class BabaGAVATUserAnalyzer:
    """BabaGAVAT - Sokak Zekasƒ± ile Kullanƒ±cƒ± Analiz Sistemi"""
    
    def __init__(self):
        self.clients: Dict[str, TelegramClient] = {}
        self.is_monitoring = False
        self.user_profiles: Dict[str, UserProfile] = {}
        self.invite_candidates: List[InviteCandidate] = []
        self.monitored_groups: Set[str] = set()
        
        # BabaGAVAT'ƒ±n sokak zekasƒ± kriterleri
        self.spam_keywords = [
            "iban", "hesap", "√∂deme", "para", "tl", "euro", "dolar",
            "fiyat", "√ºcret", "tarih", "saat", "randevu", "bulu≈üma",
            "whatsapp", "telegram", "dm", "√∂zelden", "yazƒ±n", "dolandƒ±rƒ±cƒ±",
            "sahte", "fake", "scam", "kandƒ±rma"
        ]
        
        self.transaction_patterns = [
            r'\b\d{2,4}\s*tl\b',  # fiyat belirtimi
            r'\b\d{1,2}:\d{2}\b',  # saat belirtimi
            r'\btr\d{2}\s*\d{4}\s*\d{4}\s*\d{4}\s*\d{4}\s*\d{4}\s*\d{2}\b',  # IBAN
            r'\b\d{4}\s*\d{4}\s*\d{4}\s*\d{4}\b',  # kart numarasƒ± pattern
            r'\b(bug√ºn|yarƒ±n|pazartesi|salƒ±|√ßar≈üamba|per≈üembe|cuma|cumartesi|pazar)\b'  # tarih
        ]
        
        # BabaGAVAT'ƒ±n pozitif sinyalleri
        self.positive_indicators = [
            "te≈üekk√ºr", "saƒüol", "merhaba", "selam", "g√ºnaydƒ±n", "iyi geceler",
            "nasƒ±lsƒ±n", "keyifli", "g√ºzel", "harika", "s√ºper", "m√ºkemmel",
            "profesyonel", "kaliteli", "g√ºvenilir", "samimi"
        ]
        
        logger.info("üí™ BabaGAVAT User Analyzer ba≈ülatƒ±ldƒ± - Sokak zekasƒ± aktif!")
    
    async def initialize(self, clients: Dict[str, TelegramClient]) -> None:
        """BabaGAVAT Analyzer'ƒ± ba≈ülat"""
        try:
            self.clients = clients
            
            # Database'i ba≈ülat
            await database_manager.initialize()
            await self._create_babagavat_tables()
            
            # Event handler'larƒ± kaydet
            await self._register_event_handlers()
            
            # Mevcut gruplarƒ± tara
            await self._discover_groups()
            
            # Background tasks ba≈ülat
            asyncio.create_task(self._periodic_analysis())
            asyncio.create_task(self._invite_processor())
            asyncio.create_task(self._babagavat_intelligence_monitor())
            
            self.is_monitoring = True
            logger.info("‚úÖ BabaGAVAT User Analyzer hazƒ±r - Sokak kontrol√º ba≈üladƒ±! üí™")
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT ba≈ülatma hatasƒ±: {e}")
            raise
    
    async def _create_babagavat_tables(self) -> None:
        """BabaGAVAT i√ßin √∂zel tablolarƒ± olu≈ütur"""
        try:
            async with database_manager._get_connection() as db:
                # User Profiles tablosu
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS babagavat_user_profiles (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id TEXT UNIQUE NOT NULL,
                        username TEXT,
                        display_name TEXT,
                        has_photo BOOLEAN DEFAULT FALSE,
                        bio TEXT DEFAULT '',
                        first_seen TIMESTAMP NOT NULL,
                        last_activity TIMESTAMP NOT NULL,
                        message_count INTEGER DEFAULT 0,
                        group_count INTEGER DEFAULT 0,
                        trust_score REAL DEFAULT 0.5,
                        trust_level TEXT DEFAULT 'neutral',
                        analysis_reasons TEXT, -- JSON array
                        spam_indicators TEXT, -- JSON array
                        positive_signals TEXT, -- JSON array
                        transaction_signals TEXT, -- JSON array
                        interaction_quality REAL DEFAULT 0.5,
                        consistency_score REAL DEFAULT 0.5,
                        activity_pattern TEXT, -- JSON object
                        babagavat_notes TEXT DEFAULT '',
                        babagavat_approval BOOLEAN DEFAULT FALSE,
                        street_smart_score REAL DEFAULT 0.0,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # Message Analysis tablosu
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS babagavat_message_analysis (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id TEXT NOT NULL,
                        group_id TEXT NOT NULL,
                        message_id INTEGER NOT NULL,
                        message_text TEXT,
                        spam_score REAL DEFAULT 0.0,
                        transaction_score REAL DEFAULT 0.0,
                        engagement_score REAL DEFAULT 0.0,
                        street_smart_score REAL DEFAULT 0.0,
                        detected_patterns TEXT, -- JSON array
                        analysis_flags TEXT, -- JSON array
                        babagavat_verdict TEXT DEFAULT '',
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # Invite Candidates tablosu
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS babagavat_invite_candidates (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id TEXT NOT NULL,
                        username TEXT,
                        trust_score REAL NOT NULL,
                        recommendation_reason TEXT NOT NULL,
                        contact_message TEXT NOT NULL,
                        priority TEXT DEFAULT 'medium',
                        babagavat_approval BOOLEAN DEFAULT FALSE,
                        status TEXT DEFAULT 'pending', -- pending, contacted, accepted, rejected
                        contacted_at TIMESTAMP,
                        response_received BOOLEAN DEFAULT FALSE,
                        babagavat_notes TEXT DEFAULT '',
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # Group Monitoring tablosu
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS babagavat_group_monitoring (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        group_id TEXT UNIQUE NOT NULL,
                        group_name TEXT,
                        monitoring_enabled BOOLEAN DEFAULT TRUE,
                        female_user_count INTEGER DEFAULT 0,
                        trusted_user_count INTEGER DEFAULT 0,
                        suspicious_user_count INTEGER DEFAULT 0,
                        last_scan TIMESTAMP,
                        activity_level TEXT DEFAULT 'unknown',
                        babagavat_rating TEXT DEFAULT 'unrated',
                        street_value_score REAL DEFAULT 0.0,
                        notes TEXT DEFAULT '',
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                # BabaGAVAT Intelligence Log
                await db.execute("""
                    CREATE TABLE IF NOT EXISTS babagavat_intelligence_log (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        intelligence_type TEXT NOT NULL,
                        target_id TEXT NOT NULL,
                        analysis_data TEXT NOT NULL, -- JSON
                        confidence_level REAL DEFAULT 0.0,
                        action_taken TEXT DEFAULT '',
                        babagavat_decision TEXT NOT NULL,
                        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                    )
                """)
                
                await db.commit()
                logger.info("‚úÖ BabaGAVAT tablolarƒ± olu≈üturuldu - Sokak dosyalarƒ± hazƒ±r! üìã")
                
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT tablo olu≈üturma hatasƒ±: {e}")
            raise
    
    async def _register_event_handlers(self) -> None:
        """Event handler'larƒ± kaydet"""
        try:
            for bot_username, client in self.clients.items():
                
                @client.on(events.NewMessage)
                async def handle_new_message(event):
                    """Yeni mesaj analizi - BabaGAVAT'ƒ±n sokak kontrol√º"""
                    try:
                        if event.is_private:
                            return  # Sadece grup mesajlarƒ±nƒ± analiz et
                        
                        sender = await event.get_sender()
                        if not sender or not isinstance(sender, User):
                            return
                        
                        # Sadece kadƒ±n kullanƒ±cƒ±larƒ± analiz et (BabaGAVAT'ƒ±n hedef kitlesi)
                        if not await self._is_female_user(sender):
                            return
                        
                        # BabaGAVAT'ƒ±n sokak zekasƒ± ile mesajƒ± analiz et
                        await self._analyze_message_with_street_smarts(
                            user_id=str(sender.id),
                            username=sender.username or "",
                            display_name=f"{sender.first_name or ''} {sender.last_name or ''}".strip(),
                            group_id=str(event.chat_id),
                            message_id=event.id,
                            message_text=event.text or "",
                            sender_info=sender
                        )
                        
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è BabaGAVAT mesaj analiz hatasƒ±: {e}")
                
                logger.info(f"‚úÖ {bot_username} i√ßin BabaGAVAT event handler'lar kaydedildi")
                
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT event handler kayƒ±t hatasƒ±: {e}")
    
    async def _is_female_user(self, user: User) -> bool:
        """Kullanƒ±cƒ±nƒ±n kadƒ±n olup olmadƒ±ƒüƒ±nƒ± tahmin et - BabaGAVAT'ƒ±n sokak zekasƒ±"""
        try:
            # Profil fotoƒürafƒ± var mƒ±?
            has_photo = user.photo is not None
            
            # ƒ∞sim analizi (T√ºrk√ße kadƒ±n isimleri - BabaGAVAT'ƒ±n listesi)
            female_names = [
                "ay≈üe", "fatma", "emine", "hatice", "zeynep", "elif", "seda", "merve",
                "√∂zlem", "g√ºl", "nur", "deniz", "cansu", "b√º≈üra", "esra", "tuƒüba",
                "pƒ±nar", "sevgi", "aslƒ±", "burcu", "derya", "sibel", "tuba", "ece",
                "melis", "dilan", "yasemin", "beg√ºm", "damla", "eda", "gamze", "hande"
            ]
            
            first_name = (user.first_name or "").lower()
            is_female_name = any(name in first_name for name in female_names)
            
            # Username analizi - BabaGAVAT'ƒ±n sokak tecr√ºbesi
            username = (user.username or "").lower()
            female_indicators = [
                "girl", "bayan", "lady", "miss", "kƒ±z", "hanƒ±m", "princess", "queen",
                "g√ºzel", "tatlƒ±", "sevimli", "angel", "baby", "honey"
            ]
            has_female_username = any(indicator in username for indicator in female_indicators)
            
            # BabaGAVAT'ƒ±n sokak zekasƒ± scoring
            score = 0
            if has_photo:
                score += 0.3
            if is_female_name:
                score += 0.5
            if has_female_username:
                score += 0.4
            
            # BabaGAVAT'ƒ±n final kararƒ±
            return score >= 0.4
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è BabaGAVAT cinsiyet analiz hatasƒ±: {e}")
            return False
    
    async def _analyze_message_with_street_smarts(self, user_id: str, username: str, display_name: str,
                                                group_id: str, message_id: int, message_text: str,
                                                sender_info: User) -> None:
        """BabaGAVAT'ƒ±n sokak zekasƒ± ile mesaj analizi"""
        try:
            # Kullanƒ±cƒ± profilini g√ºncelle/olu≈ütur
            await self._update_user_profile(user_id, username, display_name, sender_info, group_id)
            
            # BabaGAVAT'ƒ±n analiz kriterleri
            spam_score = await self._calculate_spam_score(message_text)
            transaction_score = await self._calculate_transaction_score(message_text)
            engagement_score = await self._calculate_engagement_score(message_text)
            street_smart_score = await self._calculate_street_smart_score(message_text)
            
            # Pattern tespiti - BabaGAVAT'ƒ±n sokak tecr√ºbesi
            detected_patterns = await self._detect_patterns(message_text)
            analysis_flags = await self._generate_analysis_flags(message_text, spam_score, transaction_score)
            
            # BabaGAVAT'ƒ±n kararƒ±
            babagavat_verdict = await self._get_babagavat_verdict(
                spam_score, transaction_score, engagement_score, street_smart_score
            )
            
            # Veritabanƒ±na kaydet
            await self._save_message_analysis(
                user_id, group_id, message_id, message_text,
                spam_score, transaction_score, engagement_score, street_smart_score,
                detected_patterns, analysis_flags, babagavat_verdict
            )
            
            # G√ºven puanƒ±nƒ± g√ºncelle
            await self._update_trust_score(user_id, spam_score, transaction_score, engagement_score, street_smart_score)
            
            # Davet adayƒ± kontrol√º - BabaGAVAT'ƒ±n onayƒ±
            await self._check_invite_candidate(user_id)
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT mesaj analiz hatasƒ±: {e}")
    
    async def _calculate_street_smart_score(self, message_text: str) -> float:
        """BabaGAVAT'ƒ±n sokak zekasƒ± puanƒ± hesapla"""
        try:
            if not message_text:
                return 0.0
            
            text_lower = message_text.lower()
            street_smart_score = 0.5  # Ba≈ülangƒ±√ß puanƒ±
            
            # Pozitif sokak zekasƒ± g√∂stergeleri
            smart_indicators = [
                "anlƒ±yorum", "mantƒ±klƒ±", "doƒüru", "haklƒ±sƒ±n", "katƒ±lƒ±yorum",
                "tecr√ºbe", "deneyim", "biliyorum", "g√∂rd√ºm", "ya≈üadƒ±m",
                "dikkatli", "g√ºvenli", "emin", "kontrol", "ara≈ütƒ±r"
            ]
            
            for indicator in smart_indicators:
                if indicator in text_lower:
                    street_smart_score += 0.1
            
            # Negatif sokak zekasƒ± g√∂stergeleri
            naive_indicators = [
                "bilmiyorum", "emin deƒüilim", "ne yapacaƒüƒ±m", "yardƒ±m edin",
                "kandƒ±rƒ±ldƒ±m", "dolandƒ±rƒ±ldƒ±m", "nasƒ±l olur", "inanamƒ±yorum"
            ]
            
            for indicator in naive_indicators:
                if indicator in text_lower:
                    street_smart_score -= 0.1
            
            # Soru sorma (√∂ƒürenme isteƒüi - pozitif)
            if "?" in message_text:
                street_smart_score += 0.05
            
            return max(0.0, min(street_smart_score, 1.0))
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Street smart score hesaplama hatasƒ±: {e}")
            return 0.5
    
    async def _get_babagavat_verdict(self, spam_score: float, transaction_score: float, 
                                   engagement_score: float, street_smart_score: float) -> str:
        """BabaGAVAT'ƒ±n final kararƒ±"""
        try:
            # BabaGAVAT'ƒ±n sokak zekasƒ± ile karar verme
            if spam_score > 0.7 or transaction_score > 0.8:
                return "üî¥ ≈û√úPHELI - BabaGAVAT'ƒ±n sokak zekasƒ± alarm veriyor!"
            elif engagement_score > 0.7 and street_smart_score > 0.6:
                return "üü¢ ONAYLANMI≈û - BabaGAVAT'ƒ±n g√ºvenilir listesinde!"
            elif street_smart_score > 0.8:
                return "üí™ SOKAK ZEKASI - BabaGAVAT'ƒ±n beƒüendiƒüi tip!"
            elif engagement_score > 0.6:
                return "üü° POTANSƒ∞YEL - BabaGAVAT izliyor..."
            else:
                return "‚ö™ N√ñTR - BabaGAVAT'ƒ±n radarƒ±nda deƒüil"
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è BabaGAVAT verdict hatasƒ±: {e}")
            return "‚ùì BELƒ∞RSƒ∞Z - BabaGAVAT kararsƒ±z"
    
    # ... (diƒüer metodlar aynƒ± ≈üekilde BabaGAVAT temasƒ± ile g√ºncellenir)
    
    async def _calculate_spam_score(self, message_text: str) -> float:
        """Spam puanƒ± hesapla - BabaGAVAT'ƒ±n tecr√ºbesi"""
        try:
            if not message_text:
                return 0.0
            
            text_lower = message_text.lower()
            spam_count = 0
            total_keywords = len(self.spam_keywords)
            
            for keyword in self.spam_keywords:
                if keyword in text_lower:
                    spam_count += 1
            
            # Tekrarlanan mesaj kontrol√º (BabaGAVAT'ƒ±n spam tespiti)
            if len(set(text_lower.split())) < len(text_lower.split()) * 0.5:
                spam_count += 2
            
            # √áok fazla emoji/√∂zel karakter (BabaGAVAT'ƒ±n kuralƒ±)
            special_chars = sum(1 for c in message_text if not c.isalnum() and not c.isspace())
            if special_chars > len(message_text) * 0.3:
                spam_count += 1
            
            return min(spam_count / (total_keywords + 3), 1.0)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è BabaGAVAT spam score hesaplama hatasƒ±: {e}")
            return 0.0
    
    async def _calculate_transaction_score(self, message_text: str) -> float:
        """Transaksiyon sinyali puanƒ± hesapla - BabaGAVAT'ƒ±n sokak tecr√ºbesi"""
        try:
            if not message_text:
                return 0.0
            
            transaction_count = 0
            
            for pattern in self.transaction_patterns:
                matches = re.findall(pattern, message_text.lower())
                transaction_count += len(matches)
            
            # Direkt para/√∂deme ifadeleri (BabaGAVAT'ƒ±n alarm listesi)
            money_keywords = ["√∂deme", "para", "√ºcret", "fiyat", "hesap", "kart", "transfer"]
            for keyword in money_keywords:
                if keyword in message_text.lower():
                    transaction_count += 1
            
            return min(transaction_count / 5.0, 1.0)
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è BabaGAVAT transaction score hesaplama hatasƒ±: {e}")
            return 0.0
    
    async def _calculate_engagement_score(self, message_text: str) -> float:
        """Etkile≈üim kalitesi puanƒ± hesapla - BabaGAVAT'ƒ±n deƒüerlendirmesi"""
        try:
            if not message_text:
                return 0.0
            
            score = 0.5  # BabaGAVAT'ƒ±n ba≈ülangƒ±√ß puanƒ±
            
            text_lower = message_text.lower()
            for indicator in self.positive_indicators:
                if indicator in text_lower:
                    score += 0.1
            
            # Soru sorma (BabaGAVAT etkile≈üimi sever)
            if "?" in message_text:
                score += 0.1
            
            # √áok kƒ±sa mesajlar (BabaGAVAT d√º≈ü√ºk kalite der)
            if len(message_text.strip()) < 10:
                score -= 0.2
            
            # √áok uzun mesajlar (BabaGAVAT spam der)
            if len(message_text) > 500:
                score -= 0.1
            
            return max(0.0, min(score, 1.0))
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è BabaGAVAT engagement score hesaplama hatasƒ±: {e}")
            return 0.5
    
    async def _detect_patterns(self, message_text: str) -> List[str]:
        """Mesajda pattern tespiti - BabaGAVAT'ƒ±n sokak radarƒ±"""
        try:
            patterns = []
            text_lower = message_text.lower()
            
            # IBAN pattern (BabaGAVAT'ƒ±n alarm sistemi)
            if re.search(r'\btr\d{2}\s*\d{4}\s*\d{4}\s*\d{4}\s*\d{4}\s*\d{4}\s*\d{2}\b', text_lower):
                patterns.append("iban_detected")
            
            # Fiyat pattern (BabaGAVAT'ƒ±n ticaret radarƒ±)
            if re.search(r'\b\d{2,4}\s*tl\b', text_lower):
                patterns.append("price_mentioned")
            
            # Saat pattern (BabaGAVAT'ƒ±n randevu alarmƒ±)
            if re.search(r'\b\d{1,2}:\d{2}\b', text_lower):
                patterns.append("time_mentioned")
            
            # WhatsApp/Telegram y√∂nlendirme (BabaGAVAT'ƒ±n ≈ü√ºphe listesi)
            if any(word in text_lower for word in ["whatsapp", "wp", "telegram", "dm", "√∂zelden"]):
                patterns.append("contact_redirect")
            
            # Aciliyet ifadeleri (BabaGAVAT'ƒ±n dolandƒ±rƒ±cƒ± alarmƒ±)
            if any(word in text_lower for word in ["acil", "hemen", "≈üimdi", "bug√ºn", "yarƒ±n"]):
                patterns.append("urgency_signal")
            
            # BabaGAVAT'ƒ±n √∂zel pattern'leri
            if any(word in text_lower for word in ["g√ºvenilir", "profesyonel", "kaliteli"]):
                patterns.append("quality_signal")
            
            return patterns
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è BabaGAVAT pattern detection hatasƒ±: {e}")
            return []
    
    async def _generate_analysis_flags(self, message_text: str, spam_score: float, transaction_score: float) -> List[str]:
        """Analiz bayraklarƒ± olu≈ütur - BabaGAVAT'ƒ±n uyarƒ± sistemi"""
        try:
            flags = []
            
            if spam_score > 0.6:
                flags.append("babagavat_high_spam_risk")
            
            if transaction_score > 0.5:
                flags.append("babagavat_transaction_signals")
            
            if len(message_text) > 1000:
                flags.append("babagavat_very_long_message")
            
            # √áok fazla b√ºy√ºk harf (BabaGAVAT'ƒ±n spam alarmƒ±)
            if sum(1 for c in message_text if c.isupper()) > len(message_text) * 0.5:
                flags.append("babagavat_excessive_caps")
            
            # √áok fazla emoji (BabaGAVAT'ƒ±n abartƒ± alarmƒ±)
            emoji_count = sum(1 for c in message_text if ord(c) > 127)
            if emoji_count > 20:
                flags.append("babagavat_excessive_emojis")
            
            return flags
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è BabaGAVAT analysis flags olu≈üturma hatasƒ±: {e}")
            return []
    
    # ... (geri kalan metodlar da aynƒ± ≈üekilde BabaGAVAT temasƒ± ile g√ºncellenir)
    
    async def _babagavat_intelligence_monitor(self) -> None:
        """BabaGAVAT'ƒ±n istihbarat monit√∂r√º"""
        while self.is_monitoring:
            try:
                await asyncio.sleep(1800)  # Her 30 dakika
                
                # BabaGAVAT'ƒ±n √∂zel analizi
                await self._run_babagavat_intelligence()
                
                logger.info("üïµÔ∏è BabaGAVAT istihbarat taramasƒ± tamamlandƒ±")
                
            except Exception as e:
                logger.error(f"‚ùå BabaGAVAT intelligence monitor hatasƒ±: {e}")
                await asyncio.sleep(300)
    
    async def _run_babagavat_intelligence(self) -> None:
        """BabaGAVAT'ƒ±n √∂zel istihbarat analizi"""
        try:
            # Y√ºksek potansiyelli kullanƒ±cƒ±larƒ± tespit et
            async with database_manager._get_connection() as db:
                cursor = await db.execute("""
                    SELECT user_id, username, trust_score, street_smart_score
                    FROM babagavat_user_profiles 
                    WHERE trust_score > 0.7 AND street_smart_score > 0.6
                    AND babagavat_approval = FALSE
                    ORDER BY trust_score DESC, street_smart_score DESC
                    LIMIT 10
                """)
                high_potential_users = await cursor.fetchall()
                
                for user_data in high_potential_users:
                    user_id, username, trust_score, street_smart_score = user_data
                    
                    # BabaGAVAT'ƒ±n √∂zel onayƒ±
                    await self._babagavat_special_approval(user_id, username, trust_score, street_smart_score)
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT intelligence analizi hatasƒ±: {e}")
    
    async def _babagavat_special_approval(self, user_id: str, username: str, 
                                        trust_score: float, street_smart_score: float) -> None:
        """BabaGAVAT'ƒ±n √∂zel onay sistemi"""
        try:
            # BabaGAVAT'ƒ±n karar kriterleri
            if trust_score > 0.8 and street_smart_score > 0.7:
                decision = "ONAYLANDI - BabaGAVAT'ƒ±n VIP listesine eklendi! üí™"
                approval = True
            elif trust_score > 0.75:
                decision = "ƒ∞ZLENƒ∞YOR - BabaGAVAT'ƒ±n radarƒ±nda..."
                approval = False
            else:
                decision = "BEKLEMEDE - Daha fazla veri gerekli"
                approval = False
            
            # Intelligence log'a kaydet
            async with database_manager._get_connection() as db:
                await db.execute("""
                    INSERT INTO babagavat_intelligence_log 
                    (intelligence_type, target_id, analysis_data, confidence_level, 
                     action_taken, babagavat_decision)
                    VALUES (?, ?, ?, ?, ?, ?)
                """, (
                    "special_approval", user_id,
                    json.dumps({
                        "username": username,
                        "trust_score": trust_score,
                        "street_smart_score": street_smart_score
                    }),
                    (trust_score + street_smart_score) / 2,
                    "approval_check" if approval else "monitoring",
                    decision
                ))
                
                # Onay durumunu g√ºncelle
                if approval:
                    await db.execute("""
                        UPDATE babagavat_user_profiles 
                        SET babagavat_approval = TRUE, 
                            babagavat_notes = babagavat_notes || ? || char(10),
                            updated_at = ?
                        WHERE user_id = ?
                    """, (
                        f"[{datetime.now().strftime('%Y-%m-%d %H:%M')}] {decision}",
                        datetime.now(), user_id
                    ))
                
                await db.commit()
            
            logger.info(f"üí™ BabaGAVAT √∂zel onay: {username} - {decision}")
            
        except Exception as e:
            logger.error(f"‚ùå BabaGAVAT special approval hatasƒ±: {e}")
    
    # ... (geri kalan metodlar da aynƒ± ≈üekilde g√ºncellenir)

# Global instance
babagavat_user_analyzer = BabaGAVATUserAnalyzer() 