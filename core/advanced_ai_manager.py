#!/usr/bin/env python3
"""
GavatCore V2 - Advanced AI Manager
T√ºm AI sistemlerini koordine eden merkezi y√∂netim sistemi
FULL GPT-4 POWER! üöÄ
"""

import asyncio
import json
import time
from datetime import datetime, timedelta
from typing import Dict, List, Any, Optional, Union
import structlog
import openai
from dataclasses import dataclass, asdict
from enum import Enum

# Config import
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config import (
    OPENAI_API_KEY, OPENAI_MODEL, OPENAI_TURBO_MODEL, OPENAI_VISION_MODEL,
    CRM_AI_MODEL, CHARACTER_AI_MODEL, SOCIAL_AI_MODEL,
    ENABLE_VOICE_AI, ENABLE_CRM_AI, ENABLE_SOCIAL_AI, ENABLE_ADVANCED_ANALYTICS,
    ENABLE_REAL_TIME_ANALYSIS, ENABLE_PREDICTIVE_ANALYTICS, ENABLE_SENTIMENT_ANALYSIS,
    ENABLE_PERSONALITY_ANALYSIS, AI_CONCURRENT_REQUESTS, AI_RATE_LIMIT_PER_MINUTE,
    get_ai_model_for_task, get_ai_temperature_for_task, get_ai_max_tokens_for_task
)

logger = structlog.get_logger("gavatcore.advanced_ai")

class AITaskType(Enum):
    """AI g√∂rev tipleri"""
    CHARACTER_INTERACTION = "character_interaction"
    CRM_ANALYSIS = "crm_analysis"
    SOCIAL_GAMING = "social_gaming"
    VOICE_PROCESSING = "voice_processing"
    SENTIMENT_ANALYSIS = "sentiment_analysis"
    PERSONALITY_ANALYSIS = "personality_analysis"
    PREDICTIVE_ANALYTICS = "predictive_analytics"
    REAL_TIME_ANALYSIS = "real_time_analysis"
    CONTENT_GENERATION = "content_generation"
    VISION_ANALYSIS = "vision_analysis"
    HEAVY_ANALYSIS = "heavy_analysis"

class AIPriority(Enum):
    """AI g√∂rev √∂ncelikleri"""
    LOW = 1
    NORMAL = 2
    HIGH = 3
    CRITICAL = 4
    REAL_TIME = 5

@dataclass
class AITask:
    """AI g√∂revi"""
    task_id: str
    task_type: AITaskType
    priority: AIPriority
    user_id: str
    character_id: Optional[str]
    prompt: str
    context: Dict[str, Any]
    model_override: Optional[str] = None
    temperature_override: Optional[float] = None
    max_tokens_override: Optional[int] = None
    created_at: datetime = None
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None

@dataclass
class AIAnalyticsResult:
    """AI analiz sonucu"""
    analysis_id: str
    analysis_type: str
    target_id: str
    confidence_score: float
    insights: Dict[str, Any]
    recommendations: List[str]
    metadata: Dict[str, Any]
    created_at: datetime

class AdvancedAIManager:
    """Geli≈ümi≈ü AI Y√∂netim Sistemi - FULL GPT-4 POWER! üöÄ"""
    
    def __init__(self):
        if not OPENAI_API_KEY:
            raise ValueError("OPENAI_API_KEY gerekli!")
        
        self.openai_client = openai.AsyncOpenAI(api_key=OPENAI_API_KEY)
        
        # G√∂rev kuyruƒüu ve i≈üleme
        self.task_queue: List[AITask] = []
        self.active_tasks: Dict[str, AITask] = {}
        self.completed_tasks: Dict[str, AITask] = {}
        
        # Rate limiting
        self.request_count = 0
        self.last_minute_reset = time.time()
        
        # Analytics cache
        self.analytics_cache: Dict[str, AIAnalyticsResult] = {}
        
        # Specialized AI prompts
        self.specialized_prompts = {
            "personality_analysis": """
Sen bir uzman psikolog ve ki≈üilik analistisin. A≈üaƒüƒ±daki kullanƒ±cƒ± etkile≈üim verilerini analiz ederek detaylƒ± ki≈üilik profili √ßƒ±kar:

Kullanƒ±cƒ± Verileri:
{user_data}

ADVANCED PERSONALITY ANALYSIS:
1. Big Five Personality Traits (OCEAN Model)
2. Communication Style Analysis
3. Emotional Intelligence Indicators
4. Social Behavior Patterns
5. Decision Making Style
6. Stress Response Patterns
7. Motivation Drivers
8. Learning Preferences
9. Relationship Dynamics
10. Growth Potential Areas

JSON formatƒ±nda detaylƒ± analiz ver:
{{
    "personality_profile": {{
        "openness": 0-100,
        "conscientiousness": 0-100,
        "extraversion": 0-100,
        "agreeableness": 0-100,
        "neuroticism": 0-100
    }},
    "communication_style": "analytical/expressive/driver/amiable",
    "emotional_intelligence": 0-100,
    "social_behavior": "introvert/ambivert/extrovert",
    "decision_making": "analytical/intuitive/directive/conceptual",
    "stress_response": "fight/flight/freeze/flow",
    "primary_motivators": ["achievement", "affiliation", "power"],
    "learning_style": "visual/auditory/kinesthetic/reading",
    "relationship_approach": "secure/anxious/avoidant/disorganized",
    "growth_areas": ["area1", "area2"],
    "strengths": ["strength1", "strength2"],
    "optimal_interaction_style": "detailed_recommendations",
    "personalization_tips": ["tip1", "tip2"],
    "insights": "comprehensive_psychological_analysis"
}}
            """,
            
            "real_time_sentiment": """
Sen bir duygu analizi uzmanƒ±sƒ±n. A≈üaƒüƒ±daki metni ger√ßek zamanlƒ± olarak analiz et:

Metin: {text}
Baƒülam: {context}

REAL-TIME SENTIMENT ANALYSIS:
1. Emotional Valence (Pozitif/Negatif)
2. Emotional Intensity (D√º≈ü√ºk/Orta/Y√ºksek)
3. Specific Emotions (Mutluluk, √úz√ºnt√º, √ñfke, Korku, ≈ûa≈ükƒ±nlƒ±k, ƒ∞ƒürenme)
4. Emotional Stability
5. Mood Indicators
6. Stress Levels
7. Engagement Quality
8. Response Recommendations

JSON formatƒ±nda hƒ±zlƒ± analiz ver:
{{
    "sentiment_score": -1.0 to 1.0,
    "emotional_intensity": 0-100,
    "primary_emotion": "emotion_name",
    "secondary_emotions": ["emotion1", "emotion2"],
    "mood_state": "positive/neutral/negative",
    "stress_level": 0-100,
    "engagement_quality": 0-100,
    "emotional_stability": 0-100,
    "response_tone": "empathetic/supportive/energetic/calming",
    "recommended_approach": "specific_interaction_strategy",
    "insights": "quick_emotional_analysis"
}}
            """,
            
            "predictive_behavior": """
Sen bir davranƒ±≈ü analisti ve tahmin uzmanƒ±sƒ±n. Kullanƒ±cƒ± verilerini analiz ederek gelecek davranƒ±≈ülarƒ± tahmin et:

Kullanƒ±cƒ± Ge√ßmi≈üi:
{user_history}

PREDICTIVE BEHAVIOR ANALYSIS:
1. Activity Pattern Prediction
2. Engagement Trend Forecasting
3. Churn Risk Timeline
4. Feature Usage Prediction
5. Social Interaction Forecast
6. Content Preference Evolution
7. Optimal Intervention Timing
8. Success Probability Modeling

JSON formatƒ±nda tahmin analizi ver:
{{
    "activity_prediction": {{
        "next_7_days": "high/medium/low",
        "next_30_days": "trend_description",
        "peak_activity_times": ["time1", "time2"]
    }},
    "engagement_forecast": {{
        "trend": "increasing/stable/decreasing",
        "confidence": 0-100,
        "expected_change": "percentage"
    }},
    "churn_prediction": {{
        "risk_level": "low/medium/high/critical",
        "timeline": "days_until_risk",
        "probability": 0-100
    }},
    "feature_usage": {{
        "voice_adoption": 0-100,
        "social_participation": 0-100,
        "quest_completion": 0-100
    }},
    "optimal_interventions": [
        {{"action": "intervention_type", "timing": "when", "success_rate": 0-100}}
    ],
    "behavioral_insights": "detailed_predictions_and_recommendations"
}}
            """,
            
            "content_optimization": """
Sen bir i√ßerik stratejisti ve engagement uzmanƒ±sƒ±n. Kullanƒ±cƒ± verilerine g√∂re optimal i√ßerik stratejisi geli≈ütir:

Kullanƒ±cƒ± Profili:
{user_profile}

ƒ∞√ßerik Ge√ßmi≈üi:
{content_history}

CONTENT OPTIMIZATION STRATEGY:
1. Content Type Preferences
2. Optimal Content Length
3. Best Posting Times
4. Engagement Triggers
5. Personalization Level
6. Visual vs Text Preference
7. Interactive Elements
8. Emotional Tone Optimization

JSON formatƒ±nda strateji ver:
{{
    "content_strategy": {{
        "preferred_types": ["type1", "type2"],
        "optimal_length": "short/medium/long",
        "best_times": ["time1", "time2"],
        "frequency": "daily/weekly/bi-weekly"
    }},
    "engagement_optimization": {{
        "primary_triggers": ["trigger1", "trigger2"],
        "emotional_tone": "motivational/educational/entertaining",
        "personalization_level": "high/medium/low",
        "interactive_elements": ["element1", "element2"]
    }},
    "content_recommendations": [
        {{"type": "content_type", "topic": "topic", "expected_engagement": 0-100}}
    ],
    "a_b_test_suggestions": ["test1", "test2"],
    "performance_predictions": {{
        "engagement_rate": 0-100,
        "completion_rate": 0-100,
        "sharing_probability": 0-100
    }},
    "insights": "comprehensive_content_strategy"
}}
            """
        }
        
        # Background task processor ba≈ülat
        asyncio.create_task(self._process_task_queue())
        
        logger.info("üöÄ Advanced AI Manager ba≈ülatƒ±ldƒ± - FULL GPT-4 POWER!")
    
    async def submit_ai_task(self, task_type: AITaskType, user_id: str, prompt: str,
                           context: Dict[str, Any] = None, character_id: str = None,
                           priority: AIPriority = AIPriority.NORMAL,
                           model_override: str = None) -> str:
        """AI g√∂revi g√∂nder"""
        try:
            task_id = f"{task_type.value}_{user_id}_{int(time.time())}"
            
            task = AITask(
                task_id=task_id,
                task_type=task_type,
                priority=priority,
                user_id=user_id,
                character_id=character_id,
                prompt=prompt,
                context=context or {},
                model_override=model_override,
                created_at=datetime.now()
            )
            
            # Priority'ye g√∂re kuyruƒüa ekle
            if priority == AIPriority.REAL_TIME:
                self.task_queue.insert(0, task)
            elif priority == AIPriority.CRITICAL:
                # Critical task'larƒ± en ba≈üa ekle (real-time'dan sonra)
                real_time_count = sum(1 for t in self.task_queue if t.priority == AIPriority.REAL_TIME)
                self.task_queue.insert(real_time_count, task)
            else:
                self.task_queue.append(task)
            
            logger.info(f"üéØ AI g√∂revi eklendi: {task_id} ({task_type.value}, {priority.name})")
            return task_id
            
        except Exception as e:
            logger.error(f"‚ùå AI g√∂rev ekleme hatasƒ±: {e}")
            return ""
    
    async def get_task_result(self, task_id: str, wait_timeout: float = 30.0) -> Optional[Dict[str, Any]]:
        """G√∂rev sonucunu al"""
        try:
            start_time = time.time()
            
            while time.time() - start_time < wait_timeout:
                # Tamamlanan g√∂revlerde kontrol et
                if task_id in self.completed_tasks:
                    task = self.completed_tasks[task_id]
                    if task.error:
                        return {"error": task.error}
                    return task.result
                
                # Kƒ±sa bekleme
                await asyncio.sleep(0.1)
            
            return {"error": "Timeout - g√∂rev tamamlanamadƒ±"}
            
        except Exception as e:
            logger.error(f"‚ùå G√∂rev sonucu alma hatasƒ±: {e}")
            return {"error": str(e)}
    
    async def analyze_personality(self, user_id: str, user_data: Dict[str, Any]) -> Dict[str, Any]:
        """Ki≈üilik analizi yap"""
        if not ENABLE_PERSONALITY_ANALYSIS:
            return {"error": "Personality analysis devre dƒ±≈üƒ±"}
        
        task_id = await self.submit_ai_task(
            task_type=AITaskType.PERSONALITY_ANALYSIS,
            user_id=user_id,
            prompt=self.specialized_prompts["personality_analysis"].format(user_data=json.dumps(user_data, default=str)),
            priority=AIPriority.HIGH
        )
        
        return await self.get_task_result(task_id)
    
    async def analyze_real_time_sentiment(self, user_id: str, text: str, context: Dict[str, Any] = None) -> Dict[str, Any]:
        """Ger√ßek zamanlƒ± duygu analizi"""
        if not ENABLE_SENTIMENT_ANALYSIS:
            return {"error": "Sentiment analysis devre dƒ±≈üƒ±"}
        
        task_id = await self.submit_ai_task(
            task_type=AITaskType.SENTIMENT_ANALYSIS,
            user_id=user_id,
            prompt=self.specialized_prompts["real_time_sentiment"].format(text=text, context=json.dumps(context or {}, default=str)),
            priority=AIPriority.REAL_TIME
        )
        
        return await self.get_task_result(task_id, wait_timeout=5.0)  # Hƒ±zlƒ± yanƒ±t
    
    async def predict_user_behavior(self, user_id: str, user_history: Dict[str, Any]) -> Dict[str, Any]:
        """Kullanƒ±cƒ± davranƒ±≈üƒ± tahmin et"""
        if not ENABLE_PREDICTIVE_ANALYTICS:
            return {"error": "Predictive analytics devre dƒ±≈üƒ±"}
        
        task_id = await self.submit_ai_task(
            task_type=AITaskType.PREDICTIVE_ANALYTICS,
            user_id=user_id,
            prompt=self.specialized_prompts["predictive_behavior"].format(user_history=json.dumps(user_history, default=str)),
            priority=AIPriority.HIGH
        )
        
        return await self.get_task_result(task_id)
    
    async def optimize_content_strategy(self, user_id: str, user_profile: Dict[str, Any], content_history: Dict[str, Any]) -> Dict[str, Any]:
        """ƒ∞√ßerik stratejisini optimize et"""
        task_id = await self.submit_ai_task(
            task_type=AITaskType.CONTENT_GENERATION,
            user_id=user_id,
            prompt=self.specialized_prompts["content_optimization"].format(
                user_profile=json.dumps(user_profile, default=str),
                content_history=json.dumps(content_history, default=str)
            ),
            priority=AIPriority.NORMAL
        )
        
        return await self.get_task_result(task_id)
    
    async def _process_task_queue(self) -> None:
        """G√∂rev kuyruƒüunu i≈üle"""
        while True:
            try:
                # Rate limiting kontrol√º
                if not await self._check_rate_limit():
                    await asyncio.sleep(1)
                    continue
                
                # Kuyrukta g√∂rev var mƒ±?
                if not self.task_queue:
                    await self._adaptive_delay()
                    continue
                
                # √áok fazla aktif g√∂rev varsa bekle
                if len(self.active_tasks) >= AI_CONCURRENT_REQUESTS:
                    await asyncio.sleep(0.5)
                    continue
                
                # En y√ºksek √∂ncelikli g√∂revi al
                task = self.task_queue.pop(0)
                
                # G√∂revi i≈üle
                await self._process_single_task(task)
                
                # Adaptif gecikme
                await self._adaptive_delay()
                
            except Exception as e:
                logger.error(f"‚ùå Task queue processing hatasƒ±: {e}")
                await asyncio.sleep(1)
    
    def _clean_json_response(self, response_content: str) -> str:
        """OpenAI yanƒ±tƒ±ndan markdown formatƒ±nƒ± temizle"""
        # Markdown code block'larƒ± temizle
        content = response_content.strip()
        
        # ```json ile ba≈ülayƒ±p ``` ile bitiyorsa temizle
        if content.startswith("```json"):
            content = content[7:]  # ```json kƒ±smƒ±nƒ± √ßƒ±kar
        elif content.startswith("```"):
            content = content[3:]   # ``` kƒ±smƒ±nƒ± √ßƒ±kar
        
        if content.endswith("```"):
            content = content[:-3]  # Son ``` kƒ±smƒ±nƒ± √ßƒ±kar
        
        return content.strip()
    
    async def _process_single_task(self, task: AITask) -> None:
        """Tek bir g√∂revi i≈üle"""
        try:
            task.started_at = datetime.now()
            self.active_tasks[task.task_id] = task
            
            # Model ve parametreleri belirle
            model = task.model_override or get_ai_model_for_task(task.task_type.value)
            temperature = task.temperature_override or get_ai_temperature_for_task(task.task_type.value)
            max_tokens = task.max_tokens_override or get_ai_max_tokens_for_task(task.task_type.value)
            
            # GPT-4 ile i≈üle
            response = await self.openai_client.chat.completions.create(
                model=model,
                messages=[
                    {"role": "system", "content": f"Sen {task.task_type.value} konusunda uzman bir AI'sƒ±n. Yanƒ±tƒ±nƒ± SADECE ge√ßerli JSON formatƒ±nda ver, markdown kullanma."},
                    {"role": "user", "content": task.prompt}
                ],
                temperature=temperature,
                max_tokens=max_tokens
            )
            
            # G√ºvenli JSON parsing
            response_content = response.choices[0].message.content.strip()
            logger.info(f"üîç AI Task yanƒ±tƒ± ({task.task_type.value}) - ilk 200 karakter: {response_content[:200]}...")
            
            # Markdown formatƒ±nƒ± temizle
            cleaned_content = self._clean_json_response(response_content)
            
            try:
                result = json.loads(cleaned_content)
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå AI Task JSON parse hatasƒ± ({task.task_id}): {e}")
                logger.error(f"‚ùå Orijinal yanƒ±t: {response_content}")
                logger.error(f"‚ùå Temizlenmi≈ü yanƒ±t: {cleaned_content}")
                # Fallback: Basit yanƒ±t formatƒ±
                result = {
                    "response": response_content,
                    "task_type": task.task_type.value,
                    "status": "processed_as_text",
                    "error": f"JSON parse hatasƒ±: {str(e)}"
                }
            
            task.result = result
            task.completed_at = datetime.now()
            
            # Tamamlanan g√∂revlere ta≈üƒ±
            self.completed_tasks[task.task_id] = task
            del self.active_tasks[task.task_id]
            
            processing_time = (task.completed_at - task.started_at).total_seconds()
            logger.info(f"‚úÖ AI g√∂revi tamamlandƒ±: {task.task_id} ({processing_time:.2f}s)")
            
        except Exception as e:
            task.error = str(e)
            task.completed_at = datetime.now()
            
            self.completed_tasks[task.task_id] = task
            if task.task_id in self.active_tasks:
                del self.active_tasks[task.task_id]
            
            logger.error(f"‚ùå AI g√∂rev i≈üleme hatasƒ± ({task.task_id}): {e}")
    
    async def _check_rate_limit(self) -> bool:
        """Rate limit kontrol√º"""
        current_time = time.time()
        
        # Dakika sƒ±fƒ±rlandƒ± mƒ±?
        if current_time - self.last_minute_reset >= 60:
            self.request_count = 0
            self.last_minute_reset = current_time
        
        # Limit a≈üƒ±ldƒ± mƒ±?
        if self.request_count >= AI_RATE_LIMIT_PER_MINUTE:
            logger.warning(f"‚ö†Ô∏è AI Rate limit a≈üƒ±ldƒ±: {self.request_count}/{AI_RATE_LIMIT_PER_MINUTE}")
            return False
        
        self.request_count += 1
        return True
    
    async def _adaptive_delay(self) -> None:
        """Adaptif gecikme - sistem yoƒüunluƒüuna g√∂re ayarla"""
        # Aktif g√∂rev sayƒ±sƒ±na g√∂re gecikme
        active_count = len(self.active_tasks)
        queue_count = len(self.task_queue)
        
        if active_count > 5:
            await asyncio.sleep(2.0)  # √áok yoƒüun
        elif active_count > 3:
            await asyncio.sleep(1.0)  # Orta yoƒüun
        elif queue_count > 10:
            await asyncio.sleep(0.5)  # Kuyruk dolu
        else:
            await asyncio.sleep(0.1)  # Normal
    
    async def get_system_analytics(self) -> Dict[str, Any]:
        """Sistem analitiklerini al"""
        try:
            return {
                "queue_status": {
                    "pending_tasks": len(self.task_queue),
                    "active_tasks": len(self.active_tasks),
                    "completed_tasks": len(self.completed_tasks)
                },
                "task_breakdown": {
                    task_type.value: len([t for t in self.task_queue if t.task_type == task_type])
                    for task_type in AITaskType
                },
                "priority_breakdown": {
                    priority.name: len([t for t in self.task_queue if t.priority == priority])
                    for priority in AIPriority
                },
                "rate_limiting": {
                    "requests_this_minute": self.request_count,
                    "limit": AI_RATE_LIMIT_PER_MINUTE,
                    "utilization": f"{(self.request_count / AI_RATE_LIMIT_PER_MINUTE) * 100:.1f}%"
                },
                "ai_features": {
                    "voice_ai": ENABLE_VOICE_AI,
                    "crm_ai": ENABLE_CRM_AI,
                    "social_ai": ENABLE_SOCIAL_AI,
                    "advanced_analytics": ENABLE_ADVANCED_ANALYTICS,
                    "real_time_analysis": ENABLE_REAL_TIME_ANALYSIS,
                    "predictive_analytics": ENABLE_PREDICTIVE_ANALYTICS,
                    "sentiment_analysis": ENABLE_SENTIMENT_ANALYSIS,
                    "personality_analysis": ENABLE_PERSONALITY_ANALYSIS
                }
            }
            
        except Exception as e:
            logger.error(f"‚ùå System analytics hatasƒ±: {e}")
            return {"error": str(e)}

# Global instance
advanced_ai_manager = None

async def initialize_advanced_ai_manager() -> AdvancedAIManager:
    """Advanced AI Manager'ƒ± ba≈ülat"""
    global advanced_ai_manager
    advanced_ai_manager = AdvancedAIManager()
    return advanced_ai_manager 