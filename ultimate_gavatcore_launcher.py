#!/usr/bin/env python3
"""
üî• ULTIMATE GAVATCORE LAUNCHER v3.0 üî•
M√ºkemmel Bot Sistemi - Full GPT + Character + Persona Aktif

3 Ana Bot:
- üéØ BabaGavat (Bilge lider, abi tavrƒ±)
- üéÆ Yayƒ±ncƒ± Lara (Enerjik streamer)
- üå∏ XXXGeisha (Gizemli, zarif)

√ñzellikler:
‚úÖ GPT-4 Entegrasyonu
‚úÖ Karakter Sistemleri
‚úÖ Persona & Senaryolar
‚úÖ DM Handling
‚úÖ Grup Y√∂netimi
‚úÖ Contact Management
‚úÖ Session Management
‚úÖ Health Monitoring
"""

import asyncio
import subprocess
import sys
import time
import os
import signal
import json
import psutil
from datetime import datetime
from typing import Dict, List, Optional, Any
from pathlib import Path
import structlog

# Configure logging
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_logger_name,
        structlog.stdlib.add_log_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.dev.ConsoleRenderer()
    ],
    wrapper_class=structlog.stdlib.BoundLogger,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)

log = structlog.get_logger("gavatcore.ultimate")

class UltimateGavatCoreLauncher:
    def __init__(self):
        self.processes = []
        self.running = False
        self.start_time = datetime.now()
        
        # 3 Ana Bot Konfig√ºrasyonu
        self.bot_configs = {
            "babagavat": {
                "name": "üéØ BabaGavat",
                "session": "sessions/babagavat_conversation.session",
                "character": {
                    "name": "Baba Gavat",
                    "personality": "Bilge, tecr√ºbeli, komik. Gruplarda lider, herkesi y√∂nlendirir. Bazen argo kullanƒ±r.",
                    "style": "Abi tavrƒ±, √∂ƒü√ºt verici, bazen ironik. 'Evlat', 'oƒülum' gibi hitaplar.",
                    "mood": "wise_leader",
                    "trigger_words": ["baba", "gavat", "abi", "hocam", "tavsiye", "yardƒ±m"]
                },
                "priority": 1,
                "description": "Ana lider bot - Grup y√∂netimi ve DM handling"
            },
            "yayincilara": {
                "name": "üéÆ Yayƒ±ncƒ± Lara",
                "session": "sessions/yayincilara_conversation.session",
                "character": {
                    "name": "Yayƒ±ncƒ± Lara",
                    "personality": "Enerjik, eƒülenceli, yayƒ±n odaklƒ±. Streaming k√ºlt√ºr√ºne hakim, trending konularda aktif.",
                    "style": "Gen√ß, dinamik dil. Gaming ve streaming terimleri kullanƒ±r.",
                    "mood": "streamer_energy",
                    "trigger_words": ["yayƒ±n", "stream", "game", "chat", "live", "twitch"]
                },
                "priority": 2,
                "description": "Streaming ve gaming odaklƒ± bot"
            },
            "xxxgeisha": {
                "name": "üå∏ XXXGeisha",
                "session": "sessions/xxxgeisha_conversation.session",
                "character": {
                    "name": "Geisha",
                    "personality": "Gizemli, √ßekici, sofistike. Derin konu≈ümalar yapar, sanatsal yakla≈üƒ±mlar.",
                    "style": "Zarif, akƒ±llƒ± dil. Metaforlar ve felsefi yakla≈üƒ±mlar kullanƒ±r.",
                    "mood": "mysterious_elegant",
                    "trigger_words": ["sanat", "g√ºzellik", "felsefe", "geisha", "zen", "estetik"]
                },
                "priority": 3,
                "description": "Sofistike ve gizemli karakter bot"
            }
        }
        
        # Sistem bile≈üenleri
        self.system_components = {
            "main_system": {
                "name": "üèóÔ∏è Ana Sistem (GavatCore)",
                "command": "python main.py",
                "priority": 0,
                "description": "Core sistem - Contact management, DM handling"
            },
            "flask_api": {
                "name": "üåê Flask API Server",
                "command": "python apis/production_bot_api.py",
                "priority": 4,
                "description": "REST API server (port 5050)"
            },
            "xp_token_api": {
                "name": "ü™ô XP Token API",
                "command": "python apis/xp_token_api_sync.py",
                "priority": 5,
                "description": "Token economy API (port 5051)"
            }
        }
    
    def print_ultimate_banner(self):
        """Ultimate banner"""
        banner = f"""
üî•‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüî•
‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  
‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  
‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó
 ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
üî•‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüî•
        üöÄ ULTIMATE GAVATCORE LAUNCHER v3.0 üöÄ
        üíé FULL GPT + CHARACTER + PERSONA SYSTEM üíé
üî•‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüî•

üéØ 3 ANA BOT:
   ‚Ä¢ BabaGavat (Bilge Lider)
   ‚Ä¢ Yayƒ±ncƒ± Lara (Streamer Energy)  
   ‚Ä¢ XXXGeisha (Mysterious Elegant)

‚ú® √ñZELLIKLER:
   ‚Ä¢ GPT-4 Entegrasyonu
   ‚Ä¢ Karakter Sistemleri
   ‚Ä¢ Persona & Senaryolar
   ‚Ä¢ DM & Grup Y√∂netimi
   ‚Ä¢ Contact Management
   ‚Ä¢ Health Monitoring

üî•‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêüî•
        """
        print(banner)
    
    def check_dependencies(self) -> bool:
        """Sistem gereksinimlerini kontrol et"""
        log.info("üîç Sistem kontrolleri ba≈ülƒ±yor...")
        
        # Python version
        if sys.version_info < (3, 8):
            log.error("‚ùå Python 3.8+ gerekli!")
            return False
        log.info(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor}")
        
        # Required files
        required_files = [
            "config.py", "main.py", "multi_bot_launcher.py"
        ]
        
        missing_files = []
        for file in required_files:
            if not Path(file).exists():
                missing_files.append(file)
        
        if missing_files:
            log.error(f"‚ùå Eksik dosyalar: {missing_files}")
            return False
        
        # Session files
        for bot_key, config in self.bot_configs.items():
            session_path = Path(config["session"])
            if not session_path.exists():
                log.warning(f"‚ö†Ô∏è Session dosyasƒ± bulunamadƒ±: {session_path}")
                # Create empty session file
                session_path.parent.mkdir(exist_ok=True)
                session_path.touch()
        
        # Memory check
        memory = psutil.virtual_memory()
        if memory.available < 2 * 1024**3:  # 2GB
            log.warning("‚ö†Ô∏è D√º≈ü√ºk RAM! 2GB+ √∂nerilen")
        else:
            log.info(f"‚úÖ RAM: {memory.available // (1024**3)}GB mevcut")
        
        log.info("‚úÖ T√ºm kontroller ba≈üarƒ±lƒ±!")
        return True
    
    def start_system_component(self, comp_key: str, config: Dict) -> bool:
        """Sistem bile≈üeni ba≈ülat"""
        log.info(f"üöÄ {config['name']} ba≈ülatƒ±lƒ±yor...")
        
        try:
            process = subprocess.Popen(
                config['command'].split(),
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=os.getcwd(),
                env=os.environ.copy()
            )
            
            time.sleep(3)
            
            if process.poll() is None:
                self.processes.append({
                    'key': comp_key,
                    'name': config['name'],
                    'type': 'system',
                    'process': process,
                    'pid': process.pid,
                    'start_time': datetime.now(),
                    'command': config['command']
                })
                log.info(f"‚úÖ {config['name']} ba≈ülatƒ±ldƒ±! (PID: {process.pid})")
                return True
            else:
                log.error(f"‚ùå {config['name']} ba≈ülatƒ±lamadƒ±!")
                return False
                
        except Exception as e:
            log.error(f"‚ùå {config['name']} hatasƒ±: {e}")
            return False
    
    def start_character_bot(self, bot_key: str, config: Dict) -> bool:
        """Karakter botu ba≈ülat"""
        log.info(f"ü§ñ {config['name']} ba≈ülatƒ±lƒ±yor...")
        
        try:
            # Multi bot launcher ile ba≈ülat
            env = os.environ.copy()
            env['GAVATCORE_BOT_MODE'] = bot_key
            env['GAVATCORE_CHARACTER'] = json.dumps(config['character'])
            
            process = subprocess.Popen(
                ['python', 'multi_bot_launcher.py'],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                cwd=os.getcwd(),
                env=env
            )
            
            time.sleep(5)  # Character botlar i√ßin daha uzun bekleme
            
            if process.poll() is None:
                self.processes.append({
                    'key': bot_key,
                    'name': config['name'],
                    'type': 'character_bot',
                    'character': config['character']['name'],
                    'process': process,
                    'pid': process.pid,
                    'start_time': datetime.now(),
                    'session': config['session']
                })
                log.info(f"‚úÖ {config['name']} aktif! (PID: {process.pid})")
                log.info(f"   üé≠ Karakter: {config['character']['name']}")
                log.info(f"   üí≠ Ki≈üilik: {config['character']['personality'][:50]}...")
                return True
            else:
                log.error(f"‚ùå {config['name']} ba≈ülatƒ±lamadƒ±!")
                return False
                
        except Exception as e:
            log.error(f"‚ùå {config['name']} hatasƒ±: {e}")
            return False
    
    def start_all_systems(self) -> Dict[str, int]:
        """T√ºm sistemleri ba≈ülat"""
        log.info("üî• ULTIMATE GAVATCORE BA≈ûLATILIYOR! üî•")
        
        results = {
            'system_components': 0,
            'character_bots': 0,
            'total_success': 0,
            'total_attempted': 0
        }
        
        # 1. Sistem bile≈üenlerini ba≈ülat
        log.info("üèóÔ∏è Sistem bile≈üenleri ba≈ülatƒ±lƒ±yor...")
        sorted_components = sorted(
            self.system_components.items(),
            key=lambda x: x[1]['priority']
        )
        
        for comp_key, config in sorted_components:
            results['total_attempted'] += 1
            if self.start_system_component(comp_key, config):
                results['system_components'] += 1
                results['total_success'] += 1
            time.sleep(2)
        
        # 2. Karakter botlarƒ±nƒ± ba≈ülat
        log.info("ü§ñ Karakter botlarƒ± ba≈ülatƒ±lƒ±yor...")
        sorted_bots = sorted(
            self.bot_configs.items(),
            key=lambda x: x[1]['priority']
        )
        
        for bot_key, config in sorted_bots:
            results['total_attempted'] += 1
            if self.start_character_bot(bot_key, config):
                results['character_bots'] += 1
                results['total_success'] += 1
            time.sleep(3)
        
        return results
    
    def show_ultimate_status(self):
        """Ultimate durum g√∂sterimi"""
        print("\n" + "="*80)
        print("üìä ULTIMATE GAVATCORE SYSTEM STATUS")
        print("="*80)
        
        if not self.processes:
            print("‚ùå Hi√ßbir bile≈üen √ßalƒ±≈ümƒ±yor")
            return
        
        # Sistem bile≈üenleri
        system_procs = [p for p in self.processes if p['type'] == 'system']
        if system_procs:
            print("\nüèóÔ∏è Sƒ∞STEM Bƒ∞LE≈ûENLERƒ∞:")
            print("-" * 40)
            for i, proc in enumerate(system_procs, 1):
                try:
                    uptime = datetime.now() - proc['start_time']
                    status = "üü¢ √áALI≈ûIYOR" if proc['process'].poll() is None else "üî¥ DURDU"
                    memory_mb = psutil.Process(proc['pid']).memory_info().rss / (1024 * 1024)
                    
                    print(f"{i:2d}. {proc['name']}")
                    print(f"    Status: {status}")
                    print(f"    PID: {proc['pid']}")
                    print(f"    Uptime: {str(uptime).split('.')[0]}")
                    print(f"    Memory: {memory_mb:.1f}MB")
                    print()
                except Exception as e:
                    print(f"{i:2d}. {proc['name']} - ‚ùå HATA: {e}")
                    print()
        
        # Karakter botlarƒ±
        bot_procs = [p for p in self.processes if p['type'] == 'character_bot']
        if bot_procs:
            print("ü§ñ KARAKTER BOTLARI:")
            print("-" * 40)
            for i, proc in enumerate(bot_procs, 1):
                try:
                    uptime = datetime.now() - proc['start_time']
                    status = "üü¢ √áALI≈ûIYOR" if proc['process'].poll() is None else "üî¥ DURDU"
                    memory_mb = psutil.Process(proc['pid']).memory_info().rss / (1024 * 1024)
                    
                    print(f"{i:2d}. {proc['name']}")
                    print(f"    üé≠ Karakter: {proc['character']}")
                    print(f"    Status: {status}")
                    print(f"    PID: {proc['pid']}")
                    print(f"    Uptime: {str(uptime).split('.')[0]}")
                    print(f"    Memory: {memory_mb:.1f}MB")
                    print(f"    Session: {proc['session']}")
                    print()
                except Exception as e:
                    print(f"{i:2d}. {proc['name']} - ‚ùå HATA: {e}")
                    print()
        
        # √ñzet
        total_uptime = datetime.now() - self.start_time
        running_count = sum(1 for p in self.processes if p['process'].poll() is None)
        total_memory = sum(
            psutil.Process(p['pid']).memory_info().rss / (1024 * 1024)
            for p in self.processes
            if p['process'].poll() is None
        )
        
        print("üìà √ñZET:")
        print("-" * 40)
        print(f"üü¢ √áalƒ±≈üan: {running_count}/{len(self.processes)}")
        print(f"‚è±Ô∏è Sistem Uptime: {str(total_uptime).split('.')[0]}")
        print(f"üíæ Toplam Memory: {total_memory:.1f}MB")
        print(f"üé≠ Aktif Karakterler: {len(bot_procs)}")
        print(f"üèóÔ∏è Sistem Bile≈üenleri: {len(system_procs)}")
    
    def stop_all_systems(self):
        """T√ºm sistemleri durdur"""
        log.info("üõë ULTIMATE GAVATCORE DURDURULUYOR...")
        
        for proc in self.processes:
            try:
                process = psutil.Process(proc['pid'])
                if process.is_running():
                    process.terminate()
                    log.info(f"üî¥ {proc['name']} durduruldu")
                    
                    # Zorla kapatma gerekirse
                    try:
                        process.wait(timeout=5)
                    except psutil.TimeoutExpired:
                        process.kill()
                        log.warning(f"üíÄ {proc['name']} zorla kapatƒ±ldƒ±")
                        
            except psutil.NoSuchProcess:
                log.info(f"‚ö†Ô∏è {proc['name']} zaten durmu≈ü")
            except Exception as e:
                log.error(f"‚ùå {proc['name']} durdurma hatasƒ±: {e}")
        
        self.processes.clear()
        log.info("‚úÖ T√ºm sistemler durduruldu!")
    
    def interactive_ultimate_menu(self):
        """Ultimate interaktif men√º"""
        while True:
            print("\n" + "="*60)
            print("üéÆ ULTIMATE GAVATCORE CONTROL PANEL")
            print("="*60)
            print("1. üöÄ T√ºm Sistemleri Ba≈ülat")
            print("2. üìä Ultimate Status G√∂ster")
            print("3. ü§ñ Sadece Character Botlarƒ± Ba≈ülat")
            print("4. üèóÔ∏è Sadece Sistem Bile≈üenlerini Ba≈ülat")
            print("5. üõë T√ºm Sistemleri Durdur")
            print("6. üîÑ Full Sistem Restart")
            print("7. üìã Bot Karakterlerini G√∂ster")
            print("8. ‚ùå √áƒ±kƒ±≈ü")
            
            choice = input("\nüéØ Se√ßiminiz (1-8): ").strip()
            
            if choice == "1":
                results = self.start_all_systems()
                print(f"\nüéâ BA≈ûLATMA SONU√áLARI:")
                print(f"   üèóÔ∏è Sistem Bile≈üenleri: {results['system_components']}")
                print(f"   ü§ñ Karakter Botlarƒ±: {results['character_bots']}")
                print(f"   ‚úÖ Toplam Ba≈üarƒ±lƒ±: {results['total_success']}/{results['total_attempted']}")
                
            elif choice == "2":
                self.show_ultimate_status()
                
            elif choice == "3":
                log.info("ü§ñ Sadece karakter botlarƒ± ba≈ülatƒ±lƒ±yor...")
                success = 0
                for bot_key, config in self.bot_configs.items():
                    if self.start_character_bot(bot_key, config):
                        success += 1
                    time.sleep(3)
                print(f"üéâ {success}/{len(self.bot_configs)} karakter botu ba≈ülatƒ±ldƒ±!")
                
            elif choice == "4":
                log.info("üèóÔ∏è Sadece sistem bile≈üenleri ba≈ülatƒ±lƒ±yor...")
                success = 0
                for comp_key, config in self.system_components.items():
                    if self.start_system_component(comp_key, config):
                        success += 1
                    time.sleep(2)
                print(f"üéâ {success}/{len(self.system_components)} sistem bile≈üeni ba≈ülatƒ±ldƒ±!")
                
            elif choice == "5":
                self.stop_all_systems()
                
            elif choice == "6":
                self.stop_all_systems()
                time.sleep(3)
                results = self.start_all_systems()
                print(f"üîÑ Sistem yeniden ba≈ülatƒ±ldƒ±! {results['total_success']} bile≈üen aktif")
                
            elif choice == "7":
                self.show_character_info()
                
            elif choice == "8":
                self.stop_all_systems()
                print("üëã Ultimate GavatCore kapatƒ±lƒ±yor!")
                break
                
            else:
                print("‚ùå Ge√ßersiz se√ßim!")
    
    def show_character_info(self):
        """Karakter bilgilerini g√∂ster"""
        print("\n" + "="*60)
        print("üé≠ GAVATCORE CHARACTER PROFILES")
        print("="*60)
        
        for i, (bot_key, config) in enumerate(self.bot_configs.items(), 1):
            char = config['character']
            print(f"\n{i}. {config['name']}")
            print(f"   üé≠ Karakter: {char['name']}")
            print(f"   üí≠ Ki≈üilik: {char['personality']}")
            print(f"   üó£Ô∏è Konu≈üma Tarzƒ±: {char['style']}")
            print(f"   üéØ Mood: {char['mood']}")
            print(f"   üîë Trigger Words: {', '.join(char['trigger_words'])}")
            print(f"   üìÅ Session: {config['session']}")
            print(f"   üìù A√ßƒ±klama: {config['description']}")
    
    def run(self):
        """Ultimate launcher √ßalƒ±≈ütƒ±r"""
        self.print_ultimate_banner()
        
        if not self.check_dependencies():
            log.error("‚ùå Sistem kontrolleri ba≈üarƒ±sƒ±z!")
            sys.exit(1)
        
        # Signal handlers
        def signal_handler(signum, frame):
            log.info(f"üõë Kapatma sinyali alƒ±ndƒ±: {signum}")
            self.stop_all_systems()
            sys.exit(0)
        
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
        
        log.info("üéÆ Ultimate Control Panel ba≈ülatƒ±lƒ±yor...")
        
        try:
            self.interactive_ultimate_menu()
        except KeyboardInterrupt:
            log.info("üõë Ctrl+C ile √ßƒ±kƒ±≈ü...")
            self.stop_all_systems()

if __name__ == "__main__":
    launcher = UltimateGavatCoreLauncher()
    launcher.run()