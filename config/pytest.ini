[tool:pytest]
# GAVATCore Pytest Configuration
# Production-grade test configuration for comprehensive validation

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum pytest version
minversion = 6.0

# Add current directory to Python path
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov-config=.coveragerc
    --cov-branch
    --cov-fail-under=80
    --durations=10
    --color=yes

# Logging configuration
log_level = INFO
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)d)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Warnings configuration
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::pytest.PytestUnhandledCoroutineWarning

# Markers for test categorization
markers =
    unit: Unit tests (fast, isolated)
    integration: Integration tests (moderate speed, external dependencies)
    slow: Slow tests (database, network, file I/O)
    security: Security-focused tests
    performance: Performance benchmarking tests
    smoke: Smoke tests for quick validation
    regression: Regression tests for bug fixes
    api: API endpoint tests
    database: Database-related tests
    asyncio: Asynchronous tests
    mock: Tests using mocking
    parametrize: Parameterized tests
    
# Test collection configuration
collect_ignore = 
    setup.py
    conftest.py
    build
    dist
    .tox
    .pytest_cache
    __pycache__
    node_modules

# Async test configuration (requires pytest-asyncio)
asyncio_mode = auto

# Timeout settings (requires pytest-timeout)
timeout = 300
timeout_method = thread

# Parallel execution settings (requires pytest-xdist)
# Use with: pytest -n auto
# numprocesses = auto

# Coverage configuration
norecursedirs = 
    .git
    .tox
    dist
    build
    *.egg
    __pycache__
    .pytest_cache
    htmlcov
    .coverage*
    .venv
    venv
    env

# Django settings (if applicable)
DJANGO_SETTINGS_MODULE = tests.settings

# Environment variables for testing
env = 
    TESTING = true
    GAVATCORE_TEST_MODE = true
    DEBUG_MODE = false
    PYTHONPATH = {toxinidir}

# Cache configuration
cache_dir = .pytest_cache

# JUnit XML output for CI/CD
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = false

# Test result output formatting
console_output_style = progress
disable_warnings = true

# Memory and resource management
maxfail = 5
tb = short

# Ignore functions in source code that start with test_ but aren't actual tests
collect_ignore_glob = ["core/session_manager.py::test_session"] 